// Code generated by protoc-gen-gogo.
// source: dashboard.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChartType int32

const (
	LINE     ChartType = 0
	BAR      ChartType = 1
	PIE      ChartType = 2
	SCATTER  ChartType = 3
	BUBLE    ChartType = 4
	RADAR    ChartType = 5
	GEO      ChartType = 6
	TIMELINE ChartType = 7
)

var ChartType_name = map[int32]string{
	0: "LINE",
	1: "BAR",
	2: "PIE",
	3: "SCATTER",
	4: "BUBLE",
	5: "RADAR",
	6: "GEO",
	7: "TIMELINE",
}
var ChartType_value = map[string]int32{
	"LINE":     0,
	"BAR":      1,
	"PIE":      2,
	"SCATTER":  3,
	"BUBLE":    4,
	"RADAR":    5,
	"GEO":      6,
	"TIMELINE": 7,
}

func (x ChartType) String() string {
	return proto.EnumName(ChartType_name, int32(x))
}
func (ChartType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{0} }

type CardDecoration_Size int32

const (
	// Small is 1x1 block on iphone
	SMALL CardDecoration_Size = 0
	// Medium is 2x1 block on iphone
	MEDIUM CardDecoration_Size = 1
	// Large is 2x2 block on iphone
	LARGE CardDecoration_Size = 2
)

var CardDecoration_Size_name = map[int32]string{
	0: "SMALL",
	1: "MEDIUM",
	2: "LARGE",
}
var CardDecoration_Size_value = map[string]int32{
	"SMALL":  0,
	"MEDIUM": 1,
	"LARGE":  2,
}

func (x CardDecoration_Size) String() string {
	return proto.EnumName(CardDecoration_Size_name, int32(x))
}
func (CardDecoration_Size) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDashboard, []int{2, 0}
}

type CardDecoration_BackgroundStyle int32

const (
	EMPTY            CardDecoration_BackgroundStyle = 0
	IMAGE            CardDecoration_BackgroundStyle = 1
	CHART_SILHOUETTE CardDecoration_BackgroundStyle = 2
)

var CardDecoration_BackgroundStyle_name = map[int32]string{
	0: "EMPTY",
	1: "IMAGE",
	2: "CHART_SILHOUETTE",
}
var CardDecoration_BackgroundStyle_value = map[string]int32{
	"EMPTY":            0,
	"IMAGE":            1,
	"CHART_SILHOUETTE": 2,
}

func (x CardDecoration_BackgroundStyle) String() string {
	return proto.EnumName(CardDecoration_BackgroundStyle_name, int32(x))
}
func (CardDecoration_BackgroundStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDashboard, []int{2, 1}
}

type DashboardItems struct {
	// ProfileId
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// ChildId
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// Created At
	CreatedAt int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Items     []*Card `protobuf:"bytes,8,rep,name=items" json:"items,omitempty"`
}

func (m *DashboardItems) Reset()                    { *m = DashboardItems{} }
func (m *DashboardItems) String() string            { return proto.CompactTextString(m) }
func (*DashboardItems) ProtoMessage()               {}
func (*DashboardItems) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{0} }

type DashboardGetRequest struct {
	ProfileId           string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ChildId             string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	AppVersion          string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Language            string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	CountryCode         string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LastTimeDataFetched int64  `protobuf:"varint,6,opt,name=last_time_data_fetched,json=lastTimeDataFetched,proto3" json:"last_time_data_fetched,omitempty"`
}

func (m *DashboardGetRequest) Reset()                    { *m = DashboardGetRequest{} }
func (m *DashboardGetRequest) String() string            { return proto.CompactTextString(m) }
func (*DashboardGetRequest) ProtoMessage()               {}
func (*DashboardGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{1} }

type CardDecoration struct {
	Size_           CardDecoration_Size            `protobuf:"varint,1,opt,name=size,proto3,enum=otsimo.CardDecoration_Size" json:"size,omitempty"`
	BackgroundStyle CardDecoration_BackgroundStyle `protobuf:"varint,2,opt,name=background_style,json=backgroundStyle,proto3,enum=otsimo.CardDecoration_BackgroundStyle" json:"background_style,omitempty"`
	ImageUrl        string                         `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	LeftIcon        string                         `protobuf:"bytes,4,opt,name=left_icon,json=leftIcon,proto3" json:"left_icon,omitempty"`
	RightIcon       string                         `protobuf:"bytes,5,opt,name=right_icon,json=rightIcon,proto3" json:"right_icon,omitempty"`
}

func (m *CardDecoration) Reset()                    { *m = CardDecoration{} }
func (m *CardDecoration) String() string            { return proto.CompactTextString(m) }
func (*CardDecoration) ProtoMessage()               {}
func (*CardDecoration) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{2} }

type CardEmpty struct {
}

func (m *CardEmpty) Reset()                    { *m = CardEmpty{} }
func (m *CardEmpty) String() string            { return proto.CompactTextString(m) }
func (*CardEmpty) ProtoMessage()               {}
func (*CardEmpty) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{3} }

type CardWebpage struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *CardWebpage) Reset()                    { *m = CardWebpage{} }
func (m *CardWebpage) String() string            { return proto.CompactTextString(m) }
func (*CardWebpage) ProtoMessage()               {}
func (*CardWebpage) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{4} }

type CardApplink struct {
	Applink string `protobuf:"bytes,1,opt,name=applink,proto3" json:"applink,omitempty"`
}

func (m *CardApplink) Reset()                    { *m = CardApplink{} }
func (m *CardApplink) String() string            { return proto.CompactTextString(m) }
func (*CardApplink) ProtoMessage()               {}
func (*CardApplink) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{5} }

type CardAnalysis struct {
	Data      *DataSet  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	ChartType ChartType `protobuf:"varint,2,opt,name=chart_type,json=chartType,proto3,enum=otsimo.ChartType" json:"chart_type,omitempty"`
}

func (m *CardAnalysis) Reset()                    { *m = CardAnalysis{} }
func (m *CardAnalysis) String() string            { return proto.CompactTextString(m) }
func (*CardAnalysis) ProtoMessage()               {}
func (*CardAnalysis) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{6} }

type Card struct {
	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text       string          `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ExpiresAt  int64           `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CreatedAt  int64           `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Decoration *CardDecoration `protobuf:"bytes,5,opt,name=decoration" json:"decoration,omitempty"`
	// Score is between 0-500
	Score int32 `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	// ProviderWeight is between 0-2
	ProviderWeight float32 `protobuf:"fixed32,7,opt,name=provider_weight,json=providerWeight,proto3" json:"provider_weight,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Card_Empty
	//	*Card_Webpage
	//	*Card_Applink
	//	*Card_Analysis
	Data isCard_Data `protobuf_oneof:"data"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{7} }

type isCard_Data interface {
	isCard_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Card_Empty struct {
	Empty *CardEmpty `protobuf:"bytes,10,opt,name=empty,oneof"`
}
type Card_Webpage struct {
	Webpage *CardWebpage `protobuf:"bytes,11,opt,name=webpage,oneof"`
}
type Card_Applink struct {
	Applink *CardApplink `protobuf:"bytes,12,opt,name=applink,oneof"`
}
type Card_Analysis struct {
	Analysis *CardAnalysis `protobuf:"bytes,13,opt,name=analysis,oneof"`
}

func (*Card_Empty) isCard_Data()    {}
func (*Card_Webpage) isCard_Data()  {}
func (*Card_Applink) isCard_Data()  {}
func (*Card_Analysis) isCard_Data() {}

func (m *Card) GetData() isCard_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Card) GetEmpty() *CardEmpty {
	if x, ok := m.GetData().(*Card_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Card) GetWebpage() *CardWebpage {
	if x, ok := m.GetData().(*Card_Webpage); ok {
		return x.Webpage
	}
	return nil
}

func (m *Card) GetApplink() *CardApplink {
	if x, ok := m.GetData().(*Card_Applink); ok {
		return x.Applink
	}
	return nil
}

func (m *Card) GetAnalysis() *CardAnalysis {
	if x, ok := m.GetData().(*Card_Analysis); ok {
		return x.Analysis
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Card) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Card_OneofMarshaler, _Card_OneofUnmarshaler, _Card_OneofSizer, []interface{}{
		(*Card_Empty)(nil),
		(*Card_Webpage)(nil),
		(*Card_Applink)(nil),
		(*Card_Analysis)(nil),
	}
}

func _Card_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Card)
	// data
	switch x := m.Data.(type) {
	case *Card_Empty:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Card_Webpage:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Webpage); err != nil {
			return err
		}
	case *Card_Applink:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Applink); err != nil {
			return err
		}
	case *Card_Analysis:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Analysis); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Card.Data has unexpected type %T", x)
	}
	return nil
}

func _Card_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Card)
	switch tag {
	case 10: // data.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardEmpty)
		err := b.DecodeMessage(msg)
		m.Data = &Card_Empty{msg}
		return true, err
	case 11: // data.webpage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardWebpage)
		err := b.DecodeMessage(msg)
		m.Data = &Card_Webpage{msg}
		return true, err
	case 12: // data.applink
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardApplink)
		err := b.DecodeMessage(msg)
		m.Data = &Card_Applink{msg}
		return true, err
	case 13: // data.analysis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CardAnalysis)
		err := b.DecodeMessage(msg)
		m.Data = &Card_Analysis{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Card_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Card)
	// data
	switch x := m.Data.(type) {
	case *Card_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Card_Webpage:
		s := proto.Size(x.Webpage)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Card_Applink:
		s := proto.Size(x.Applink)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Card_Analysis:
		s := proto.Size(x.Analysis)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProviderItem struct {
	Cacheable bool  `protobuf:"varint,1,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	Ttl       int64 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Item      *Card `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
}

func (m *ProviderItem) Reset()                    { *m = ProviderItem{} }
func (m *ProviderItem) String() string            { return proto.CompactTextString(m) }
func (*ProviderItem) ProtoMessage()               {}
func (*ProviderItem) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{8} }

type ProviderItems struct {
	// ProfileId
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// ChildId
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// CreatedAt
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Cacheable
	Cacheable bool `protobuf:"varint,4,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	// TTL is titme to live duration
	Ttl int64 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Items
	Items []*ProviderItem `protobuf:"bytes,8,rep,name=items" json:"items,omitempty"`
}

func (m *ProviderItems) Reset()                    { *m = ProviderItems{} }
func (m *ProviderItems) String() string            { return proto.CompactTextString(m) }
func (*ProviderItems) ProtoMessage()               {}
func (*ProviderItems) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{9} }

type ProviderInfoRequest struct {
}

func (m *ProviderInfoRequest) Reset()                    { *m = ProviderInfoRequest{} }
func (m *ProviderInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ProviderInfoRequest) ProtoMessage()               {}
func (*ProviderInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{10} }

type ProviderInfo struct {
}

func (m *ProviderInfo) Reset()                    { *m = ProviderInfo{} }
func (m *ProviderInfo) String() string            { return proto.CompactTextString(m) }
func (*ProviderInfo) ProtoMessage()               {}
func (*ProviderInfo) Descriptor() ([]byte, []int) { return fileDescriptorDashboard, []int{11} }

func init() {
	proto.RegisterType((*DashboardItems)(nil), "otsimo.DashboardItems")
	proto.RegisterType((*DashboardGetRequest)(nil), "otsimo.DashboardGetRequest")
	proto.RegisterType((*CardDecoration)(nil), "otsimo.CardDecoration")
	proto.RegisterType((*CardEmpty)(nil), "otsimo.CardEmpty")
	proto.RegisterType((*CardWebpage)(nil), "otsimo.CardWebpage")
	proto.RegisterType((*CardApplink)(nil), "otsimo.CardApplink")
	proto.RegisterType((*CardAnalysis)(nil), "otsimo.CardAnalysis")
	proto.RegisterType((*Card)(nil), "otsimo.Card")
	proto.RegisterType((*ProviderItem)(nil), "otsimo.ProviderItem")
	proto.RegisterType((*ProviderItems)(nil), "otsimo.ProviderItems")
	proto.RegisterType((*ProviderInfoRequest)(nil), "otsimo.ProviderInfoRequest")
	proto.RegisterType((*ProviderInfo)(nil), "otsimo.ProviderInfo")
	proto.RegisterEnum("otsimo.ChartType", ChartType_name, ChartType_value)
	proto.RegisterEnum("otsimo.CardDecoration_Size", CardDecoration_Size_name, CardDecoration_Size_value)
	proto.RegisterEnum("otsimo.CardDecoration_BackgroundStyle", CardDecoration_BackgroundStyle_name, CardDecoration_BackgroundStyle_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for DashboardService service

type DashboardServiceClient interface {
	Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*DashboardItems, error)
}

type dashboardServiceClient struct {
	cc *grpc.ClientConn
}

func NewDashboardServiceClient(cc *grpc.ClientConn) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*DashboardItems, error) {
	out := new(DashboardItems)
	err := grpc.Invoke(ctx, "/otsimo.DashboardService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashboardService service

type DashboardServiceServer interface {
	Get(context.Context, *DashboardGetRequest) (*DashboardItems, error)
}

func RegisterDashboardServiceServer(s *grpc.Server, srv DashboardServiceServer) {
	s.RegisterService(&_DashboardService_serviceDesc, srv)
}

func _DashboardService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DashboardGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DashboardServiceServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DashboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DashboardService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for DashboardProvider service

type DashboardProviderClient interface {
	Info(ctx context.Context, in *ProviderInfoRequest, opts ...grpc.CallOption) (*ProviderInfo, error)
	Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*ProviderItems, error)
}

type dashboardProviderClient struct {
	cc *grpc.ClientConn
}

func NewDashboardProviderClient(cc *grpc.ClientConn) DashboardProviderClient {
	return &dashboardProviderClient{cc}
}

func (c *dashboardProviderClient) Info(ctx context.Context, in *ProviderInfoRequest, opts ...grpc.CallOption) (*ProviderInfo, error) {
	out := new(ProviderInfo)
	err := grpc.Invoke(ctx, "/otsimo.DashboardProvider/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardProviderClient) Get(ctx context.Context, in *DashboardGetRequest, opts ...grpc.CallOption) (*ProviderItems, error) {
	out := new(ProviderItems)
	err := grpc.Invoke(ctx, "/otsimo.DashboardProvider/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashboardProvider service

type DashboardProviderServer interface {
	Info(context.Context, *ProviderInfoRequest) (*ProviderInfo, error)
	Get(context.Context, *DashboardGetRequest) (*ProviderItems, error)
}

func RegisterDashboardProviderServer(s *grpc.Server, srv DashboardProviderServer) {
	s.RegisterService(&_DashboardProvider_serviceDesc, srv)
}

func _DashboardProvider_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DashboardProviderServer).Info(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DashboardProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DashboardGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DashboardProviderServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DashboardProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otsimo.DashboardProvider",
	HandlerType: (*DashboardProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _DashboardProvider_Info_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DashboardProvider_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *DashboardItems) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DashboardItems) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ChildId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ChildId)))
		i += copy(data[i:], m.ChildId)
	}
	if m.CreatedAt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintDashboard(data, i, uint64(m.CreatedAt))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0x42
			i++
			i = encodeVarintDashboard(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DashboardGetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DashboardGetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ChildId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ChildId)))
		i += copy(data[i:], m.ChildId)
	}
	if len(m.AppVersion) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.AppVersion)))
		i += copy(data[i:], m.AppVersion)
	}
	if len(m.Language) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if len(m.CountryCode) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.CountryCode)))
		i += copy(data[i:], m.CountryCode)
	}
	if m.LastTimeDataFetched != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintDashboard(data, i, uint64(m.LastTimeDataFetched))
	}
	return i, nil
}

func (m *CardDecoration) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CardDecoration) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Size_))
	}
	if m.BackgroundStyle != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDashboard(data, i, uint64(m.BackgroundStyle))
	}
	if len(m.ImageUrl) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ImageUrl)))
		i += copy(data[i:], m.ImageUrl)
	}
	if len(m.LeftIcon) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.LeftIcon)))
		i += copy(data[i:], m.LeftIcon)
	}
	if len(m.RightIcon) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.RightIcon)))
		i += copy(data[i:], m.RightIcon)
	}
	return i, nil
}

func (m *CardEmpty) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CardEmpty) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CardWebpage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CardWebpage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	return i, nil
}

func (m *CardApplink) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CardApplink) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Applink) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.Applink)))
		i += copy(data[i:], m.Applink)
	}
	return i, nil
}

func (m *CardAnalysis) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CardAnalysis) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ChartType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDashboard(data, i, uint64(m.ChartType))
	}
	return i, nil
}

func (m *Card) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Card) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Text) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.ExpiresAt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintDashboard(data, i, uint64(m.ExpiresAt))
	}
	if m.CreatedAt != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintDashboard(data, i, uint64(m.CreatedAt))
	}
	if m.Decoration != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Decoration.Size()))
		n2, err := m.Decoration.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Score != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Score))
	}
	if m.ProviderWeight != 0 {
		data[i] = 0x3d
		i++
		i = encodeFixed32Dashboard(data, i, uint32(math.Float32bits(float32(m.ProviderWeight))))
	}
	if m.Data != nil {
		nn3, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Card_Empty) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Empty != nil {
		data[i] = 0x52
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Empty.Size()))
		n4, err := m.Empty.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Card_Webpage) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Webpage != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Webpage.Size()))
		n5, err := m.Webpage.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Card_Applink) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Applink != nil {
		data[i] = 0x62
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Applink.Size()))
		n6, err := m.Applink.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Card_Analysis) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Analysis != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Analysis.Size()))
		n7, err := m.Analysis.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ProviderItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProviderItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cacheable {
		data[i] = 0x8
		i++
		if m.Cacheable {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Ttl != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Ttl))
	}
	if m.Item != nil {
		data[i] = 0x22
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Item.Size()))
		n8, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ProviderItems) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProviderItems) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ChildId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintDashboard(data, i, uint64(len(m.ChildId)))
		i += copy(data[i:], m.ChildId)
	}
	if m.CreatedAt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintDashboard(data, i, uint64(m.CreatedAt))
	}
	if m.Cacheable {
		data[i] = 0x20
		i++
		if m.Cacheable {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Ttl != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintDashboard(data, i, uint64(m.Ttl))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0x42
			i++
			i = encodeVarintDashboard(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProviderInfoRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProviderInfoRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProviderInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProviderInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Dashboard(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dashboard(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDashboard(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DashboardItems) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDashboard(uint64(m.CreatedAt))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDashboard(uint64(l))
		}
	}
	return n
}

func (m *DashboardGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.LastTimeDataFetched != 0 {
		n += 1 + sovDashboard(uint64(m.LastTimeDataFetched))
	}
	return n
}

func (m *CardDecoration) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovDashboard(uint64(m.Size_))
	}
	if m.BackgroundStyle != 0 {
		n += 1 + sovDashboard(uint64(m.BackgroundStyle))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.LeftIcon)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.RightIcon)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}

func (m *CardEmpty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CardWebpage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}

func (m *CardApplink) Size() (n int) {
	var l int
	_ = l
	l = len(m.Applink)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}

func (m *CardAnalysis) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.ChartType != 0 {
		n += 1 + sovDashboard(uint64(m.ChartType))
	}
	return n
}

func (m *Card) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovDashboard(uint64(m.ExpiresAt))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDashboard(uint64(m.CreatedAt))
	}
	if m.Decoration != nil {
		l = m.Decoration.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovDashboard(uint64(m.Score))
	}
	if m.ProviderWeight != 0 {
		n += 5
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Card_Empty) Size() (n int) {
	var l int
	_ = l
	if m.Empty != nil {
		l = m.Empty.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}
func (m *Card_Webpage) Size() (n int) {
	var l int
	_ = l
	if m.Webpage != nil {
		l = m.Webpage.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}
func (m *Card_Applink) Size() (n int) {
	var l int
	_ = l
	if m.Applink != nil {
		l = m.Applink.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}
func (m *Card_Analysis) Size() (n int) {
	var l int
	_ = l
	if m.Analysis != nil {
		l = m.Analysis.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}
func (m *ProviderItem) Size() (n int) {
	var l int
	_ = l
	if m.Cacheable {
		n += 2
	}
	if m.Ttl != 0 {
		n += 1 + sovDashboard(uint64(m.Ttl))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovDashboard(uint64(l))
	}
	return n
}

func (m *ProviderItems) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovDashboard(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDashboard(uint64(m.CreatedAt))
	}
	if m.Cacheable {
		n += 2
	}
	if m.Ttl != 0 {
		n += 1 + sovDashboard(uint64(m.Ttl))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovDashboard(uint64(l))
		}
	}
	return n
}

func (m *ProviderInfoRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProviderInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDashboard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDashboard(x uint64) (n int) {
	return sovDashboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DashboardItems) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashboardItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashboardItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Card{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashboardGetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashboardGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashboardGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimeDataFetched", wireType)
			}
			m.LastTimeDataFetched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastTimeDataFetched |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardDecoration) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardDecoration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardDecoration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Size_ |= (CardDecoration_Size(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackgroundStyle", wireType)
			}
			m.BackgroundStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BackgroundStyle |= (CardDecoration_BackgroundStyle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftIcon = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightIcon = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardEmpty) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWebpage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWebpage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWebpage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardApplink) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardApplink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardApplink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applink = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardAnalysis) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardAnalysis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardAnalysis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChartType", wireType)
			}
			m.ChartType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ChartType |= (ChartType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpiresAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decoration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Decoration == nil {
				m.Decoration = &CardDecoration{}
			}
			if err := m.Decoration.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderWeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.ProviderWeight = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Empty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardEmpty{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Card_Empty{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webpage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardWebpage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Card_Webpage{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardApplink{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Card_Applink{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analysis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CardAnalysis{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Card_Analysis{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cacheable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cacheable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Card{}
			}
			if err := m.Item.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderItems) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cacheable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cacheable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDashboard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ProviderItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderInfoRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDashboard(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDashboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDashboard(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDashboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDashboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDashboard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDashboard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDashboard(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDashboard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDashboard   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorDashboard = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xb6, 0x2c, 0xea, 0x6f, 0xa4, 0xc8, 0xf4, 0xda, 0x31, 0x58, 0xa7, 0x75, 0x5d, 0x1e, 0x1a,
	0x37, 0x40, 0xe5, 0x42, 0x01, 0x0a, 0xb4, 0x40, 0x0f, 0x94, 0xa5, 0xda, 0x02, 0xa4, 0xc4, 0xa5,
	0xe4, 0x06, 0xed, 0x85, 0x5d, 0x92, 0x2b, 0x89, 0x08, 0x25, 0xb2, 0xe4, 0xca, 0x89, 0xfa, 0x06,
	0x3d, 0x14, 0xe8, 0x63, 0xf4, 0x41, 0x7a, 0xc8, 0x31, 0xa7, 0x9e, 0xfb, 0xf7, 0x20, 0x9d, 0x5d,
	0xfe, 0x58, 0x76, 0x14, 0xf4, 0x50, 0xf4, 0x20, 0x60, 0xf7, 0xfb, 0xbe, 0xd1, 0xce, 0xcc, 0xb7,
	0xb3, 0x84, 0x1d, 0x97, 0xc6, 0x33, 0x3b, 0xa0, 0x91, 0xdb, 0x0a, 0xa3, 0x80, 0x07, 0xa4, 0x1c,
	0xf0, 0xd8, 0x9b, 0x07, 0x87, 0xf7, 0x5c, 0xca, 0x69, 0xcc, 0x78, 0x02, 0x1f, 0x7e, 0x3c, 0xf5,
	0xf8, 0x6c, 0x69, 0xb7, 0x9c, 0x60, 0x7e, 0x3a, 0x0d, 0xa6, 0xc1, 0xa9, 0x84, 0xed, 0xe5, 0x44,
	0xee, 0xe4, 0x46, 0xae, 0x12, 0xb9, 0xfe, 0x53, 0x01, 0x9a, 0xdd, 0xec, 0x9f, 0xfb, 0x9c, 0xcd,
	0x63, 0xf2, 0x1e, 0x00, 0x72, 0x13, 0xcf, 0x67, 0x96, 0xe7, 0x6a, 0x85, 0xe3, 0xc2, 0x49, 0xcd,
	0xac, 0xa5, 0x48, 0xdf, 0x25, 0xef, 0x40, 0xd5, 0x99, 0x79, 0xbe, 0x2b, 0xc8, 0x6d, 0x49, 0x56,
	0xe4, 0x1e, 0x29, 0x8c, 0x74, 0x22, 0x46, 0x39, 0x73, 0x2d, 0xca, 0xb5, 0x22, 0x92, 0x45, 0xb3,
	0x96, 0x22, 0x06, 0x27, 0x3a, 0x94, 0x3c, 0x71, 0x82, 0x56, 0x3d, 0x2e, 0x9e, 0xd4, 0xdb, 0x8d,
	0x56, 0x52, 0x41, 0xeb, 0x0c, 0x8f, 0x36, 0x13, 0x4a, 0xff, 0xbb, 0x00, 0x7b, 0x79, 0x3e, 0xe7,
	0x8c, 0x9b, 0xec, 0xfb, 0x25, 0x8b, 0xf9, 0x7f, 0x48, 0xea, 0x7d, 0xa8, 0xd3, 0x30, 0xb4, 0xae,
	0x59, 0x14, 0x7b, 0xc1, 0x42, 0x66, 0x55, 0x33, 0x01, 0xa1, 0xaf, 0x13, 0x84, 0x1c, 0x42, 0xd5,
	0xa7, 0x8b, 0xe9, 0x92, 0x4e, 0x99, 0xa6, 0x48, 0x36, 0xdf, 0x93, 0x0f, 0xa0, 0xe1, 0x04, 0xcb,
	0x05, 0x8f, 0x56, 0x96, 0x13, 0xb8, 0x4c, 0x2b, 0x49, 0xbe, 0x9e, 0x62, 0x67, 0x08, 0x91, 0xc7,
	0x70, 0xe0, 0xd3, 0x98, 0x5b, 0xdc, 0x9b, 0x33, 0x4b, 0x78, 0x61, 0x4d, 0x18, 0x77, 0x66, 0xcc,
	0xd5, 0xca, 0xb2, 0x01, 0x7b, 0x82, 0x1d, 0x23, 0xd9, 0x45, 0xee, 0xcb, 0x84, 0xd2, 0x7f, 0xdb,
	0x86, 0xa6, 0x28, 0xbb, 0xcb, 0x9c, 0x20, 0xa2, 0x5c, 0xa4, 0x71, 0x0a, 0x4a, 0xec, 0xfd, 0xc0,
	0x64, 0x6d, 0xcd, 0xf6, 0x83, 0xf5, 0xe6, 0xdc, 0xa8, 0x5a, 0x23, 0x94, 0x98, 0x52, 0x48, 0xbe,
	0x02, 0xd5, 0xa6, 0xce, 0xf3, 0x69, 0x84, 0xc9, 0xb8, 0x56, 0xcc, 0x57, 0x3e, 0x93, 0xb5, 0x37,
	0xdb, 0x1f, 0xbe, 0x25, 0xb8, 0x93, 0xcb, 0x47, 0x42, 0x6d, 0xee, 0xd8, 0xb7, 0x01, 0xf2, 0x00,
	0x6a, 0xde, 0x1c, 0xeb, 0xb6, 0x96, 0x91, 0x9f, 0x76, 0xaa, 0x2a, 0x81, 0xab, 0xc8, 0x17, 0xa4,
	0xcf, 0x26, 0xdc, 0xf2, 0x1c, 0x6c, 0x63, 0xd6, 0x28, 0x04, 0xfa, 0xb8, 0x17, 0xfe, 0x44, 0xde,
	0x74, 0x96, 0xb2, 0x49, 0x9b, 0x6a, 0x12, 0x11, 0xb4, 0x7e, 0x02, 0x8a, 0xc8, 0x9c, 0xd4, 0xa0,
	0x34, 0x1a, 0x1a, 0x83, 0x81, 0xba, 0x45, 0x00, 0xca, 0xc3, 0x5e, 0xb7, 0x7f, 0x35, 0x54, 0x0b,
	0x02, 0x1e, 0x18, 0xe6, 0x79, 0x4f, 0xdd, 0xd6, 0xbf, 0x80, 0x9d, 0x3b, 0x69, 0x0a, 0xb6, 0x37,
	0xbc, 0x1c, 0x7f, 0x83, 0x41, 0xb8, 0xec, 0x0f, 0x0d, 0x14, 0x16, 0xc8, 0x3e, 0xa8, 0x67, 0x17,
	0x86, 0x39, 0xb6, 0x46, 0xfd, 0xc1, 0xc5, 0xd3, 0xab, 0xde, 0x78, 0x2c, 0xc2, 0xeb, 0x50, 0x13,
	0x45, 0xf7, 0xe6, 0x21, 0x5f, 0xe9, 0x68, 0xbd, 0xd8, 0x3c, 0x63, 0x76, 0x28, 0xcc, 0x54, 0xa1,
	0x28, 0xea, 0x4a, 0x2e, 0x8f, 0x58, 0xea, 0x0f, 0x13, 0x81, 0x11, 0x86, 0xbe, 0xb7, 0x78, 0x4e,
	0x34, 0xa8, 0xd0, 0x64, 0x99, 0x8a, 0xb2, 0xad, 0xee, 0x42, 0x43, 0x0a, 0x17, 0xd4, 0x5f, 0xc5,
	0x5e, 0x8c, 0x57, 0x59, 0x11, 0x56, 0x4b, 0x59, 0xbd, 0xdd, 0x6c, 0xd1, 0xd0, 0x0b, 0xed, 0x96,
	0x70, 0x78, 0x84, 0x77, 0x56, 0x72, 0xe4, 0x13, 0x9c, 0x86, 0x19, 0x8d, 0xf0, 0x66, 0xac, 0xc2,
	0xcc, 0x99, 0xdd, 0xdc, 0x19, 0xc1, 0x8c, 0x91, 0xc0, 0x01, 0xc9, 0x96, 0xfa, 0x2f, 0x45, 0x50,
	0xc4, 0x31, 0xa4, 0x09, 0xdb, 0xf9, 0x2d, 0xc7, 0x15, 0x21, 0xa0, 0x70, 0xf6, 0x92, 0xa7, 0x57,
	0x5b, 0xae, 0x45, 0xc7, 0xd9, 0xcb, 0xd0, 0x8b, 0x58, 0xbc, 0x36, 0x6c, 0x29, 0x62, 0xf0, 0x3b,
	0xb3, 0xa8, 0xdc, 0x9d, 0xc5, 0x4f, 0x01, 0xdc, 0xfc, 0x62, 0x48, 0xbf, 0xea, 0xed, 0x83, 0xcd,
	0xd7, 0xc6, 0x5c, 0x53, 0x62, 0xd7, 0x4b, 0x31, 0x6e, 0x98, 0xbc, 0xdc, 0x25, 0x33, 0xd9, 0x90,
	0x87, 0xb0, 0x83, 0xb3, 0x78, 0xed, 0xb9, 0x2c, 0xb2, 0x5e, 0x30, 0xe1, 0xba, 0x56, 0x41, 0x7e,
	0xdb, 0x6c, 0x66, 0xf0, 0x33, 0x89, 0x92, 0x8f, 0xa0, 0xc4, 0x84, 0x35, 0x1a, 0xc8, 0x13, 0x77,
	0xd7, 0x4f, 0x94, 0x9e, 0x5d, 0x6c, 0x99, 0x89, 0x02, 0xe7, 0xa1, 0xf2, 0x22, 0x31, 0x4e, 0xab,
	0x4b, 0xf1, 0xde, 0xba, 0x38, 0xf5, 0x14, 0xe5, 0x99, 0x4a, 0x04, 0x64, 0xee, 0x35, 0xde, 0x0c,
	0x48, 0x3d, 0x16, 0x01, 0xa9, 0x8a, 0xb4, 0xa1, 0x4a, 0x53, 0x43, 0xb5, 0x7b, 0x32, 0x62, 0xff,
	0x56, 0x44, 0xca, 0x61, 0x48, 0xae, 0xeb, 0x94, 0x13, 0xe3, 0xf5, 0xef, 0xa0, 0x71, 0x99, 0x96,
	0x26, 0x5e, 0x4d, 0xf2, 0x2e, 0xd4, 0x1c, 0x8a, 0xa3, 0x4d, 0x6d, 0x3f, 0x19, 0xe1, 0xaa, 0x79,
	0x03, 0x88, 0x9b, 0xc7, 0xb9, 0x2f, 0xed, 0x2b, 0x9a, 0x62, 0x49, 0x8e, 0x41, 0x11, 0x0f, 0x9e,
	0x34, 0xe6, 0xee, 0x53, 0x28, 0x19, 0xfd, 0xd7, 0x02, 0xdc, 0x5b, 0x3f, 0xe2, 0x7f, 0x7c, 0x98,
	0x6f, 0x25, 0xaf, 0xbc, 0x25, 0xf9, 0xd2, 0x4d, 0xf2, 0x8f, 0x6e, 0x3f, 0xe4, 0x79, 0xd7, 0xd6,
	0xd3, 0xcd, 0x1e, 0xf4, 0xfb, 0xb0, 0x97, 0xc3, 0x8b, 0x49, 0x90, 0xbe, 0xe7, 0x7a, 0x73, 0xad,
	0x7f, 0x08, 0x3f, 0xa2, 0x38, 0xb7, 0xd9, 0x1c, 0x90, 0x2a, 0x28, 0x83, 0xfe, 0x93, 0x1e, 0xce,
	0x7b, 0x05, 0x8a, 0x1d, 0xc3, 0xc4, 0x69, 0xc7, 0xc5, 0x65, 0x1f, 0x07, 0x9c, 0xd4, 0xa1, 0x32,
	0x3a, 0x33, 0x70, 0xd8, 0x4d, 0xb5, 0x28, 0x9e, 0x83, 0xce, 0x55, 0x67, 0xd0, 0x53, 0x15, 0xb1,
	0x34, 0x8d, 0x2e, 0x6a, 0x4b, 0x42, 0x7b, 0xde, 0x7b, 0xaa, 0x96, 0x49, 0x03, 0xaa, 0xe3, 0xfe,
	0xb0, 0x27, 0xff, 0xab, 0xd2, 0x7e, 0x02, 0x6a, 0xfe, 0x65, 0x19, 0xb1, 0xe8, 0xda, 0x73, 0x18,
	0xf9, 0x1c, 0xa5, 0x8c, 0x93, 0xfc, 0xb5, 0xdd, 0xf0, 0xe9, 0x39, 0x3c, 0x78, 0x83, 0x94, 0x76,
	0xb4, 0x7f, 0x2c, 0xc0, 0x6e, 0x0e, 0x65, 0xc5, 0x90, 0xcf, 0x40, 0x11, 0x05, 0xdd, 0xfc, 0xe5,
	0x86, 0xea, 0x0f, 0xf7, 0x37, 0x91, 0x18, 0xfa, 0xef, 0xc9, 0xdc, 0xdf, 0xd4, 0xeb, 0xb8, 0xa3,
	0xbf, 0xfa, 0xe3, 0x68, 0xeb, 0x35, 0xfe, 0x5e, 0xfd, 0x79, 0x54, 0x78, 0x8d, 0xbf, 0xdf, 0xf1,
	0xf7, 0xf3, 0x5f, 0x47, 0x5b, 0xdf, 0x56, 0x13, 0x7d, 0x68, 0xdb, 0x65, 0xf9, 0xc5, 0x7f, 0xfc,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0xce, 0x41, 0x4d, 0x4a, 0x08, 0x00, 0x00,
}
