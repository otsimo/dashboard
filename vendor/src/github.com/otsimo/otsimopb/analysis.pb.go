// Code generated by protoc-gen-gogo.
// source: analysis.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QuerySort_SortOrder int32

const (
	QuerySort_ASC QuerySort_SortOrder = 0
	QuerySort_DSC QuerySort_SortOrder = 1
)

var QuerySort_SortOrder_name = map[int32]string{
	0: "ASC",
	1: "DSC",
}
var QuerySort_SortOrder_value = map[string]int32{
	"ASC": 0,
	"DSC": 1,
}

func (x QuerySort_SortOrder) String() string {
	return proto.EnumName(QuerySort_SortOrder_name, int32(x))
}
func (QuerySort_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{5, 0}
}

type Aggregation_Accumulator int32

const (
	Aggregation_NONE  Aggregation_Accumulator = 0
	Aggregation_COUNT Aggregation_Accumulator = 1
	Aggregation_SUM   Aggregation_Accumulator = 2
	Aggregation_MAX   Aggregation_Accumulator = 3
	Aggregation_MIN   Aggregation_Accumulator = 4
	Aggregation_AVG   Aggregation_Accumulator = 5
)

var Aggregation_Accumulator_name = map[int32]string{
	0: "NONE",
	1: "COUNT",
	2: "SUM",
	3: "MAX",
	4: "MIN",
	5: "AVG",
}
var Aggregation_Accumulator_value = map[string]int32{
	"NONE":  0,
	"COUNT": 1,
	"SUM":   2,
	"MAX":   3,
	"MIN":   4,
	"AVG":   5,
}

func (x Aggregation_Accumulator) String() string {
	return proto.EnumName(Aggregation_Accumulator_name, int32(x))
}
func (Aggregation_Accumulator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{6, 0}
}

type QueryGroup_GroupType int32

const (
	// Date gives rows each day of given timeRange
	QueryGroup_Date QueryGroup_GroupType = 0
	// Datetime gives rows on given interval
	QueryGroup_Datetime QueryGroup_GroupType = 1
	// TimeofDay gives rows on time of day. minutes and seconds on interval value determines interval.
	// ex: if minutes and seconds are false then rows will be 0,1,2,3,4
	// ex: if minutes is true then rows will be 00:00,00:01,00:02,...
	// when seconds is true than minutes is always true
	QueryGroup_TimeOfDay QueryGroup_GroupType = 2
	// Discrete should be used for String values
	QueryGroup_Discrete QueryGroup_GroupType = 3
	// ContinuesInterval is for number values
	QueryGroup_ContinuesInterval QueryGroup_GroupType = 4
)

var QueryGroup_GroupType_name = map[int32]string{
	0: "Date",
	1: "Datetime",
	2: "TimeOfDay",
	3: "Discrete",
	4: "ContinuesInterval",
}
var QueryGroup_GroupType_value = map[string]int32{
	"Date":              0,
	"Datetime":          1,
	"TimeOfDay":         2,
	"Discrete":          3,
	"ContinuesInterval": 4,
}

func (x QueryGroup_GroupType) String() string {
	return proto.EnumName(QueryGroup_GroupType_name, int32(x))
}
func (QueryGroup_GroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{8, 0}
}

type ActiveUsersRequest_Type int32

const (
	ActiveUsersRequest_MONTLY ActiveUsersRequest_Type = 0
	ActiveUsersRequest_DAILY  ActiveUsersRequest_Type = 1
	ActiveUsersRequest_NEW    ActiveUsersRequest_Type = 2
	ActiveUsersRequest_TOTAL  ActiveUsersRequest_Type = 3
)

var ActiveUsersRequest_Type_name = map[int32]string{
	0: "MONTLY",
	1: "DAILY",
	2: "NEW",
	3: "TOTAL",
}
var ActiveUsersRequest_Type_value = map[string]int32{
	"MONTLY": 0,
	"DAILY":  1,
	"NEW":    2,
	"TOTAL":  3,
}

func (x ActiveUsersRequest_Type) String() string {
	return proto.EnumName(ActiveUsersRequest_Type_name, int32(x))
}
func (ActiveUsersRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{12, 0}
}

type RetentionRequest_Type int32

const (
	RetentionRequest_ONE    RetentionRequest_Type = 0
	RetentionRequest_SEVEN  RetentionRequest_Type = 1
	RetentionRequest_THIRTY RetentionRequest_Type = 2
)

var RetentionRequest_Type_name = map[int32]string{
	0: "ONE",
	1: "SEVEN",
	2: "THIRTY",
}
var RetentionRequest_Type_value = map[string]int32{
	"ONE":    0,
	"SEVEN":  1,
	"THIRTY": 2,
}

func (x RetentionRequest_Type) String() string {
	return proto.EnumName(RetentionRequest_Type_name, int32(x))
}
func (RetentionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{14, 0}
}

type GameInfoResponse_FieldType int32

const (
	GameInfoResponse_UNKNOWN GameInfoResponse_FieldType = 0
	GameInfoResponse_STRING  GameInfoResponse_FieldType = 1
	GameInfoResponse_INTEGER GameInfoResponse_FieldType = 2
	GameInfoResponse_FLOAT   GameInfoResponse_FieldType = 3
	GameInfoResponse_BOOL    GameInfoResponse_FieldType = 4
)

var GameInfoResponse_FieldType_name = map[int32]string{
	0: "UNKNOWN",
	1: "STRING",
	2: "INTEGER",
	3: "FLOAT",
	4: "BOOL",
}
var GameInfoResponse_FieldType_value = map[string]int32{
	"UNKNOWN": 0,
	"STRING":  1,
	"INTEGER": 2,
	"FLOAT":   3,
	"BOOL":    4,
}

func (x GameInfoResponse_FieldType) String() string {
	return proto.EnumName(GameInfoResponse_FieldType_name, int32(x))
}
func (GameInfoResponse_FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{19, 0}
}

type TimeRange struct {
	// From is the unix seconds time
	From int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	// To is the unix seconds time
	To int64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{0} }

type ChildAndProfileIds struct {
	// ChildId
	ChildId string `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// ProfileId
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (m *ChildAndProfileIds) Reset()                    { *m = ChildAndProfileIds{} }
func (m *ChildAndProfileIds) String() string            { return proto.CompactTextString(m) }
func (*ChildAndProfileIds) ProtoMessage()               {}
func (*ChildAndProfileIds) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{1} }

type ChildAndTimeRange struct {
	// ChildId
	ChildId string `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// ProfileId
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// Range is the time range
	Range *TimeRange `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
}

func (m *ChildAndTimeRange) Reset()                    { *m = ChildAndTimeRange{} }
func (m *ChildAndTimeRange) String() string            { return proto.CompactTextString(m) }
func (*ChildAndTimeRange) ProtoMessage()               {}
func (*ChildAndTimeRange) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{2} }

type GameWithVersions struct {
	// GameId
	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Versions
	Versions []string `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
}

func (m *GameWithVersions) Reset()                    { *m = GameWithVersions{} }
func (m *GameWithVersions) String() string            { return proto.CompactTextString(m) }
func (*GameWithVersions) ProtoMessage()               {}
func (*GameWithVersions) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{3} }

type PlayedGamesList struct {
	Games []*GameWithVersions `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	// ChildId
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// Range is the time range
	Range *TimeRange `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
}

func (m *PlayedGamesList) Reset()                    { *m = PlayedGamesList{} }
func (m *PlayedGamesList) String() string            { return proto.CompactTextString(m) }
func (*PlayedGamesList) ProtoMessage()               {}
func (*PlayedGamesList) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{4} }

type QuerySort struct {
	FieldName string              `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Order     QuerySort_SortOrder `protobuf:"varint,2,opt,name=order,proto3,enum=apipb.QuerySort_SortOrder" json:"order,omitempty"`
}

func (m *QuerySort) Reset()                    { *m = QuerySort{} }
func (m *QuerySort) String() string            { return proto.CompactTextString(m) }
func (*QuerySort) ProtoMessage()               {}
func (*QuerySort) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{5} }

type Aggregation struct {
	FieldName   string                  `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	OutputField string                  `protobuf:"bytes,2,opt,name=output_field,json=outputField,proto3" json:"output_field,omitempty"`
	Accumulator Aggregation_Accumulator `protobuf:"varint,3,opt,name=accumulator,proto3,enum=apipb.Aggregation_Accumulator" json:"accumulator,omitempty"`
}

func (m *Aggregation) Reset()                    { *m = Aggregation{} }
func (m *Aggregation) String() string            { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()               {}
func (*Aggregation) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{6} }

type GroupInterval struct {
	// For ContinuesInterval
	Int int32 `protobuf:"varint,1,opt,name=int,proto3" json:"int,omitempty"`
	// For ContinuesInterval
	Real float32 `protobuf:"fixed32,2,opt,name=real,proto3" json:"real,omitempty"`
	// For Datetime
	Days int32 `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
	// For Datetime
	Hours int32 `protobuf:"varint,4,opt,name=hours,proto3" json:"hours,omitempty"`
	// For TimeOfDay
	Minutes bool `protobuf:"varint,5,opt,name=minutes,proto3" json:"minutes,omitempty"`
	// For TimeOfDay
	Seconds bool `protobuf:"varint,6,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (m *GroupInterval) Reset()                    { *m = GroupInterval{} }
func (m *GroupInterval) String() string            { return proto.CompactTextString(m) }
func (*GroupInterval) ProtoMessage()               {}
func (*GroupInterval) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{7} }

type QueryGroup struct {
	FieldName string               `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Type      QueryGroup_GroupType `protobuf:"varint,2,opt,name=type,proto3,enum=apipb.QueryGroup_GroupType" json:"type,omitempty"`
	// Interval is optional for Date and Discrete type
	Interval    *GroupInterval `protobuf:"bytes,3,opt,name=interval" json:"interval,omitempty"`
	OutputField string         `protobuf:"bytes,4,opt,name=output_field,json=outputField,proto3" json:"output_field,omitempty"`
}

func (m *QueryGroup) Reset()                    { *m = QueryGroup{} }
func (m *QueryGroup) String() string            { return proto.CompactTextString(m) }
func (*QueryGroup) ProtoMessage()               {}
func (*QueryGroup) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{8} }

type Query struct {
	Events       []string       `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Range        *TimeRange     `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	Sort         []*QuerySort   `protobuf:"bytes,3,rep,name=sort" json:"sort,omitempty"`
	Limit        int32          `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32          `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	GroupBy      *QueryGroup    `protobuf:"bytes,6,opt,name=group_by,json=groupBy" json:"group_by,omitempty"`
	Aggregations []*Aggregation `protobuf:"bytes,7,rep,name=aggregations" json:"aggregations,omitempty"`
	RawQueries   [][]byte       `protobuf:"bytes,8,rep,name=raw_queries,json=rawQueries" json:"raw_queries,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{9} }

type AnalyzeRequest struct {
	// ChildId
	ChildId string `protobuf:"bytes,1,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// ProfileId
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// UseAppData changes data source
	UseAppData bool `protobuf:"varint,3,opt,name=use_app_data,json=useAppData,proto3" json:"use_app_data,omitempty"`
	// Query is calculation query
	Query *Query `protobuf:"bytes,6,opt,name=query" json:"query,omitempty"`
	// Games are the compute this request on
	Games []*GameWithVersions `protobuf:"bytes,7,rep,name=games" json:"games,omitempty"`
}

func (m *AnalyzeRequest) Reset()                    { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()               {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{10} }

type AnalyzeResult struct {
	// Request
	Request *AnalyzeRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Data
	Data *DataSet `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Created At
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *AnalyzeResult) Reset()                    { *m = AnalyzeResult{} }
func (m *AnalyzeResult) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResult) ProtoMessage()               {}
func (*AnalyzeResult) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{11} }

// Active Users
type ActiveUsersRequest struct {
	Type  ActiveUsersRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.ActiveUsersRequest_Type" json:"type,omitempty"`
	Dates []int64                 `protobuf:"varint,2,rep,packed,name=dates" json:"dates,omitempty"`
	AppId string                  `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *ActiveUsersRequest) Reset()                    { *m = ActiveUsersRequest{} }
func (m *ActiveUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ActiveUsersRequest) ProtoMessage()               {}
func (*ActiveUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{12} }

type ActiveUsersResult struct {
	// Request
	Request *ActiveUsersRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Data
	Data *DataSet `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Created At
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ActiveUsersResult) Reset()                    { *m = ActiveUsersResult{} }
func (m *ActiveUsersResult) String() string            { return proto.CompactTextString(m) }
func (*ActiveUsersResult) ProtoMessage()               {}
func (*ActiveUsersResult) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{13} }

// Retention
type RetentionRequest struct {
	Type  RetentionRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.RetentionRequest_Type" json:"type,omitempty"`
	Dates []int64               `protobuf:"varint,2,rep,packed,name=dates" json:"dates,omitempty"`
	AppId string                `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *RetentionRequest) Reset()                    { *m = RetentionRequest{} }
func (m *RetentionRequest) String() string            { return proto.CompactTextString(m) }
func (*RetentionRequest) ProtoMessage()               {}
func (*RetentionRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{14} }

type RetentionResult struct {
	// Request
	Request *RetentionRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Data
	Data *DataSet `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Created At
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *RetentionResult) Reset()                    { *m = RetentionResult{} }
func (m *RetentionResult) String() string            { return proto.CompactTextString(m) }
func (*RetentionResult) ProtoMessage()               {}
func (*RetentionResult) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{15} }

type InactiveUsersRequest struct {
	AppId          string     `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	InactiveDuring *TimeRange `protobuf:"bytes,2,opt,name=inactive_during,json=inactiveDuring" json:"inactive_during,omitempty"`
	ActiveDuring   *TimeRange `protobuf:"bytes,3,opt,name=active_during,json=activeDuring" json:"active_during,omitempty"`
}

func (m *InactiveUsersRequest) Reset()                    { *m = InactiveUsersRequest{} }
func (m *InactiveUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*InactiveUsersRequest) ProtoMessage()               {}
func (*InactiveUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{16} }

type GetActiveUsersRequest struct {
	AppId  string     `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Period *TimeRange `protobuf:"bytes,2,opt,name=period" json:"period,omitempty"`
}

func (m *GetActiveUsersRequest) Reset()                    { *m = GetActiveUsersRequest{} }
func (m *GetActiveUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetActiveUsersRequest) ProtoMessage()               {}
func (*GetActiveUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{17} }

type ActiveOnRangeRequest struct {
	Range        *TimeRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	CountryCodes []string   `protobuf:"bytes,2,rep,name=country_codes,json=countryCodes" json:"country_codes,omitempty"`
}

func (m *ActiveOnRangeRequest) Reset()                    { *m = ActiveOnRangeRequest{} }
func (m *ActiveOnRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*ActiveOnRangeRequest) ProtoMessage()               {}
func (*ActiveOnRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{18} }

type GameInfoResponse struct {
	GameId string                        `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Events []*GameInfoResponse_EventInfo `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (m *GameInfoResponse) Reset()                    { *m = GameInfoResponse{} }
func (m *GameInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GameInfoResponse) ProtoMessage()               {}
func (*GameInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{19} }

type GameInfoResponse_FieldInfo struct {
	Name string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type GameInfoResponse_FieldType `protobuf:"varint,2,opt,name=type,proto3,enum=apipb.GameInfoResponse_FieldType" json:"type,omitempty"`
}

func (m *GameInfoResponse_FieldInfo) Reset()         { *m = GameInfoResponse_FieldInfo{} }
func (m *GameInfoResponse_FieldInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfoResponse_FieldInfo) ProtoMessage()    {}
func (*GameInfoResponse_FieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{19, 0}
}

type GameInfoResponse_EventInfo struct {
	Name   string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields []*GameInfoResponse_FieldInfo `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *GameInfoResponse_EventInfo) Reset()         { *m = GameInfoResponse_EventInfo{} }
func (m *GameInfoResponse_EventInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfoResponse_EventInfo) ProtoMessage()    {}
func (*GameInfoResponse_EventInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorAnalysis, []int{19, 1}
}

type AppDataInfoReq struct {
}

func (m *AppDataInfoReq) Reset()                    { *m = AppDataInfoReq{} }
func (m *AppDataInfoReq) String() string            { return proto.CompactTextString(m) }
func (*AppDataInfoReq) ProtoMessage()               {}
func (*AppDataInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorAnalysis, []int{20} }

func init() {
	proto.RegisterType((*TimeRange)(nil), "apipb.TimeRange")
	proto.RegisterType((*ChildAndProfileIds)(nil), "apipb.ChildAndProfileIds")
	proto.RegisterType((*ChildAndTimeRange)(nil), "apipb.ChildAndTimeRange")
	proto.RegisterType((*GameWithVersions)(nil), "apipb.GameWithVersions")
	proto.RegisterType((*PlayedGamesList)(nil), "apipb.PlayedGamesList")
	proto.RegisterType((*QuerySort)(nil), "apipb.QuerySort")
	proto.RegisterType((*Aggregation)(nil), "apipb.Aggregation")
	proto.RegisterType((*GroupInterval)(nil), "apipb.GroupInterval")
	proto.RegisterType((*QueryGroup)(nil), "apipb.QueryGroup")
	proto.RegisterType((*Query)(nil), "apipb.Query")
	proto.RegisterType((*AnalyzeRequest)(nil), "apipb.AnalyzeRequest")
	proto.RegisterType((*AnalyzeResult)(nil), "apipb.AnalyzeResult")
	proto.RegisterType((*ActiveUsersRequest)(nil), "apipb.ActiveUsersRequest")
	proto.RegisterType((*ActiveUsersResult)(nil), "apipb.ActiveUsersResult")
	proto.RegisterType((*RetentionRequest)(nil), "apipb.RetentionRequest")
	proto.RegisterType((*RetentionResult)(nil), "apipb.RetentionResult")
	proto.RegisterType((*InactiveUsersRequest)(nil), "apipb.InactiveUsersRequest")
	proto.RegisterType((*GetActiveUsersRequest)(nil), "apipb.GetActiveUsersRequest")
	proto.RegisterType((*ActiveOnRangeRequest)(nil), "apipb.ActiveOnRangeRequest")
	proto.RegisterType((*GameInfoResponse)(nil), "apipb.GameInfoResponse")
	proto.RegisterType((*GameInfoResponse_FieldInfo)(nil), "apipb.GameInfoResponse.FieldInfo")
	proto.RegisterType((*GameInfoResponse_EventInfo)(nil), "apipb.GameInfoResponse.EventInfo")
	proto.RegisterType((*AppDataInfoReq)(nil), "apipb.AppDataInfoReq")
	proto.RegisterEnum("apipb.QuerySort_SortOrder", QuerySort_SortOrder_name, QuerySort_SortOrder_value)
	proto.RegisterEnum("apipb.Aggregation_Accumulator", Aggregation_Accumulator_name, Aggregation_Accumulator_value)
	proto.RegisterEnum("apipb.QueryGroup_GroupType", QueryGroup_GroupType_name, QueryGroup_GroupType_value)
	proto.RegisterEnum("apipb.ActiveUsersRequest_Type", ActiveUsersRequest_Type_name, ActiveUsersRequest_Type_value)
	proto.RegisterEnum("apipb.RetentionRequest_Type", RetentionRequest_Type_name, RetentionRequest_Type_value)
	proto.RegisterEnum("apipb.GameInfoResponse_FieldType", GameInfoResponse_FieldType_name, GameInfoResponse_FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AnalysisService service

type AnalysisServiceClient interface {
	// ActiveOnRange returns child ids who active given time range
	ActiveOnRange(ctx context.Context, in *ActiveOnRangeRequest, opts ...grpc.CallOption) (AnalysisService_ActiveOnRangeClient, error)
	// Inactive calculates inactive users who was active given period but not after at given app
	Inactive(ctx context.Context, in *InactiveUsersRequest, opts ...grpc.CallOption) (AnalysisService_InactiveClient, error)
	// Active streams active user on given period
	Active(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (AnalysisService_ActiveClient, error)
	// PlayedGames returns games played during given time range
	PlayedGames(ctx context.Context, in *ChildAndTimeRange, opts ...grpc.CallOption) (*PlayedGamesList, error)
	// Analyze calculates given request
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResult, error)
	// ActiveUsers calculates MAU, DAU
	ActiveUsers(ctx context.Context, in *ActiveUsersRequest, opts ...grpc.CallOption) (*ActiveUsersResult, error)
	// Retention returns retentation
	Retention(ctx context.Context, in *RetentionRequest, opts ...grpc.CallOption) (*RetentionResult, error)
	// GameInfo returns available events of a game
	GameInfo(ctx context.Context, in *GameWithVersions, opts ...grpc.CallOption) (*GameInfoResponse, error)
	// AppDataInfo returns available events and their fields
	AppDataInfo(ctx context.Context, in *AppDataInfoReq, opts ...grpc.CallOption) (*GameInfoResponse, error)
}

type analysisServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalysisServiceClient(cc *grpc.ClientConn) AnalysisServiceClient {
	return &analysisServiceClient{cc}
}

func (c *analysisServiceClient) ActiveOnRange(ctx context.Context, in *ActiveOnRangeRequest, opts ...grpc.CallOption) (AnalysisService_ActiveOnRangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AnalysisService_serviceDesc.Streams[0], c.cc, "/apipb.AnalysisService/ActiveOnRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceActiveOnRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalysisService_ActiveOnRangeClient interface {
	Recv() (*ChildAndProfileIds, error)
	grpc.ClientStream
}

type analysisServiceActiveOnRangeClient struct {
	grpc.ClientStream
}

func (x *analysisServiceActiveOnRangeClient) Recv() (*ChildAndProfileIds, error) {
	m := new(ChildAndProfileIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) Inactive(ctx context.Context, in *InactiveUsersRequest, opts ...grpc.CallOption) (AnalysisService_InactiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AnalysisService_serviceDesc.Streams[1], c.cc, "/apipb.AnalysisService/Inactive", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceInactiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalysisService_InactiveClient interface {
	Recv() (*ChildAndProfileIds, error)
	grpc.ClientStream
}

type analysisServiceInactiveClient struct {
	grpc.ClientStream
}

func (x *analysisServiceInactiveClient) Recv() (*ChildAndProfileIds, error) {
	m := new(ChildAndProfileIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) Active(ctx context.Context, in *GetActiveUsersRequest, opts ...grpc.CallOption) (AnalysisService_ActiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AnalysisService_serviceDesc.Streams[2], c.cc, "/apipb.AnalysisService/Active", opts...)
	if err != nil {
		return nil, err
	}
	x := &analysisServiceActiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalysisService_ActiveClient interface {
	Recv() (*ChildAndProfileIds, error)
	grpc.ClientStream
}

type analysisServiceActiveClient struct {
	grpc.ClientStream
}

func (x *analysisServiceActiveClient) Recv() (*ChildAndProfileIds, error) {
	m := new(ChildAndProfileIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analysisServiceClient) PlayedGames(ctx context.Context, in *ChildAndTimeRange, opts ...grpc.CallOption) (*PlayedGamesList, error) {
	out := new(PlayedGamesList)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/PlayedGames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResult, error) {
	out := new(AnalyzeResult)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/Analyze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) ActiveUsers(ctx context.Context, in *ActiveUsersRequest, opts ...grpc.CallOption) (*ActiveUsersResult, error) {
	out := new(ActiveUsersResult)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/ActiveUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) Retention(ctx context.Context, in *RetentionRequest, opts ...grpc.CallOption) (*RetentionResult, error) {
	out := new(RetentionResult)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/Retention", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) GameInfo(ctx context.Context, in *GameWithVersions, opts ...grpc.CallOption) (*GameInfoResponse, error) {
	out := new(GameInfoResponse)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/GameInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysisServiceClient) AppDataInfo(ctx context.Context, in *AppDataInfoReq, opts ...grpc.CallOption) (*GameInfoResponse, error) {
	out := new(GameInfoResponse)
	err := grpc.Invoke(ctx, "/apipb.AnalysisService/AppDataInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AnalysisService service

type AnalysisServiceServer interface {
	// ActiveOnRange returns child ids who active given time range
	ActiveOnRange(*ActiveOnRangeRequest, AnalysisService_ActiveOnRangeServer) error
	// Inactive calculates inactive users who was active given period but not after at given app
	Inactive(*InactiveUsersRequest, AnalysisService_InactiveServer) error
	// Active streams active user on given period
	Active(*GetActiveUsersRequest, AnalysisService_ActiveServer) error
	// PlayedGames returns games played during given time range
	PlayedGames(context.Context, *ChildAndTimeRange) (*PlayedGamesList, error)
	// Analyze calculates given request
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResult, error)
	// ActiveUsers calculates MAU, DAU
	ActiveUsers(context.Context, *ActiveUsersRequest) (*ActiveUsersResult, error)
	// Retention returns retentation
	Retention(context.Context, *RetentionRequest) (*RetentionResult, error)
	// GameInfo returns available events of a game
	GameInfo(context.Context, *GameWithVersions) (*GameInfoResponse, error)
	// AppDataInfo returns available events and their fields
	AppDataInfo(context.Context, *AppDataInfoReq) (*GameInfoResponse, error)
}

func RegisterAnalysisServiceServer(s *grpc.Server, srv AnalysisServiceServer) {
	s.RegisterService(&_AnalysisService_serviceDesc, srv)
}

func _AnalysisService_ActiveOnRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActiveOnRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServiceServer).ActiveOnRange(m, &analysisServiceActiveOnRangeServer{stream})
}

type AnalysisService_ActiveOnRangeServer interface {
	Send(*ChildAndProfileIds) error
	grpc.ServerStream
}

type analysisServiceActiveOnRangeServer struct {
	grpc.ServerStream
}

func (x *analysisServiceActiveOnRangeServer) Send(m *ChildAndProfileIds) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalysisService_Inactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InactiveUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServiceServer).Inactive(m, &analysisServiceInactiveServer{stream})
}

type AnalysisService_InactiveServer interface {
	Send(*ChildAndProfileIds) error
	grpc.ServerStream
}

type analysisServiceInactiveServer struct {
	grpc.ServerStream
}

func (x *analysisServiceInactiveServer) Send(m *ChildAndProfileIds) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalysisService_Active_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActiveUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalysisServiceServer).Active(m, &analysisServiceActiveServer{stream})
}

type AnalysisService_ActiveServer interface {
	Send(*ChildAndProfileIds) error
	grpc.ServerStream
}

type analysisServiceActiveServer struct {
	grpc.ServerStream
}

func (x *analysisServiceActiveServer) Send(m *ChildAndProfileIds) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalysisService_PlayedGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChildAndTimeRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).PlayedGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/PlayedGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).PlayedGames(ctx, req.(*ChildAndTimeRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_ActiveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).ActiveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/ActiveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).ActiveUsers(ctx, req.(*ActiveUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_Retention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).Retention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/Retention",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).Retention(ctx, req.(*RetentionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_GameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameWithVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).GameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/GameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).GameInfo(ctx, req.(*GameWithVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysisService_AppDataInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDataInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysisServiceServer).AppDataInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.AnalysisService/AppDataInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysisServiceServer).AppDataInfo(ctx, req.(*AppDataInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalysisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.AnalysisService",
	HandlerType: (*AnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayedGames",
			Handler:    _AnalysisService_PlayedGames_Handler,
		},
		{
			MethodName: "Analyze",
			Handler:    _AnalysisService_Analyze_Handler,
		},
		{
			MethodName: "ActiveUsers",
			Handler:    _AnalysisService_ActiveUsers_Handler,
		},
		{
			MethodName: "Retention",
			Handler:    _AnalysisService_Retention_Handler,
		},
		{
			MethodName: "GameInfo",
			Handler:    _AnalysisService_GameInfo_Handler,
		},
		{
			MethodName: "AppDataInfo",
			Handler:    _AnalysisService_AppDataInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActiveOnRange",
			Handler:       _AnalysisService_ActiveOnRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Inactive",
			Handler:       _AnalysisService_Inactive_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Active",
			Handler:       _AnalysisService_Active_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analysis.proto",
}

func (m *TimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.To))
	}
	return i, nil
}

func (m *ChildAndProfileIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildAndProfileIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	return i, nil
}

func (m *ChildAndTimeRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildAndTimeRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	if m.Range != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Range.Size()))
		n1, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GameWithVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameWithVersions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.GameId)))
		i += copy(dAtA[i:], m.GameId)
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PlayedGamesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayedGamesList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if m.Range != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Range.Size()))
		n2, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *QuerySort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySort) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if m.Order != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Order))
	}
	return i, nil
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if len(m.OutputField) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.OutputField)))
		i += copy(dAtA[i:], m.OutputField)
	}
	if m.Accumulator != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Accumulator))
	}
	return i, nil
}

func (m *GroupInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupInterval) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Int))
	}
	if m.Real != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Analysis(dAtA, i, uint32(math.Float32bits(float32(m.Real))))
	}
	if m.Days != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Days))
	}
	if m.Hours != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Hours))
	}
	if m.Minutes {
		dAtA[i] = 0x28
		i++
		if m.Minutes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seconds {
		dAtA[i] = 0x30
		i++
		if m.Seconds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *QueryGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FieldName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.FieldName)))
		i += copy(dAtA[i:], m.FieldName)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Type))
	}
	if m.Interval != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Interval.Size()))
		n3, err := m.Interval.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.OutputField) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.OutputField)))
		i += copy(dAtA[i:], m.OutputField)
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, s := range m.Events {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Range != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Range.Size()))
		n4, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Sort) > 0 {
		for _, msg := range m.Sort {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Offset))
	}
	if m.GroupBy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.GroupBy.Size()))
		n5, err := m.GroupBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Aggregations) > 0 {
		for _, msg := range m.Aggregations {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RawQueries) > 0 {
		for _, b := range m.RawQueries {
			dAtA[i] = 0x42
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *AnalyzeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChildId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.ProfileId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.ProfileId)))
		i += copy(dAtA[i:], m.ProfileId)
	}
	if m.UseAppData {
		dAtA[i] = 0x18
		i++
		if m.UseAppData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Query != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Query.Size()))
		n6, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AnalyzeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Request.Size()))
		n7, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *ActiveUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Type))
	}
	if len(m.Dates) > 0 {
		dAtA10 := make([]byte, len(m.Dates)*10)
		var j9 int
		for _, num1 := range m.Dates {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	return i, nil
}

func (m *ActiveUsersResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveUsersResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Request.Size()))
		n11, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Data.Size()))
		n12, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *RetentionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Type))
	}
	if len(m.Dates) > 0 {
		dAtA14 := make([]byte, len(m.Dates)*10)
		var j13 int
		for _, num1 := range m.Dates {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	return i, nil
}

func (m *RetentionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Request.Size()))
		n15, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Data.Size()))
		n16, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *InactiveUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InactiveUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.InactiveDuring != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.InactiveDuring.Size()))
		n17, err := m.InactiveDuring.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ActiveDuring != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.ActiveDuring.Size()))
		n18, err := m.ActiveDuring.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *GetActiveUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetActiveUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Period != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Period.Size()))
		n19, err := m.Period.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ActiveOnRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveOnRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Range != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Range.Size()))
		n20, err := m.Range.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.CountryCodes) > 0 {
		for _, s := range m.CountryCodes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GameInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.GameId)))
		i += copy(dAtA[i:], m.GameId)
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GameInfoResponse_FieldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfoResponse_FieldInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *GameInfoResponse_EventInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfoResponse_EventInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnalysis(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnalysis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppDataInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDataInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Analysis(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Analysis(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAnalysis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TimeRange) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovAnalysis(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovAnalysis(uint64(m.To))
	}
	return n
}

func (m *ChildAndProfileIds) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *ChildAndTimeRange) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *GameWithVersions) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, s := range m.Versions {
			l = len(s)
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *PlayedGamesList) Size() (n int) {
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *QuerySort) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovAnalysis(uint64(m.Order))
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	l = len(m.OutputField)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Accumulator != 0 {
		n += 1 + sovAnalysis(uint64(m.Accumulator))
	}
	return n
}

func (m *GroupInterval) Size() (n int) {
	var l int
	_ = l
	if m.Int != 0 {
		n += 1 + sovAnalysis(uint64(m.Int))
	}
	if m.Real != 0 {
		n += 5
	}
	if m.Days != 0 {
		n += 1 + sovAnalysis(uint64(m.Days))
	}
	if m.Hours != 0 {
		n += 1 + sovAnalysis(uint64(m.Hours))
	}
	if m.Minutes {
		n += 2
	}
	if m.Seconds {
		n += 2
	}
	return n
}

func (m *QueryGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAnalysis(uint64(m.Type))
	}
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	l = len(m.OutputField)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *Query) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, s := range m.Events {
			l = len(s)
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Sort) > 0 {
		for _, e := range m.Sort {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovAnalysis(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAnalysis(uint64(m.Offset))
	}
	if m.GroupBy != nil {
		l = m.GroupBy.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Aggregations) > 0 {
		for _, e := range m.Aggregations {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	if len(m.RawQueries) > 0 {
		for _, b := range m.RawQueries {
			l = len(b)
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *AnalyzeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.UseAppData {
		n += 2
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *AnalyzeResult) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAnalysis(uint64(m.CreatedAt))
	}
	return n
}

func (m *ActiveUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAnalysis(uint64(m.Type))
	}
	if len(m.Dates) > 0 {
		l = 0
		for _, e := range m.Dates {
			l += sovAnalysis(uint64(e))
		}
		n += 1 + sovAnalysis(uint64(l)) + l
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *ActiveUsersResult) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAnalysis(uint64(m.CreatedAt))
	}
	return n
}

func (m *RetentionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAnalysis(uint64(m.Type))
	}
	if len(m.Dates) > 0 {
		l = 0
		for _, e := range m.Dates {
			l += sovAnalysis(uint64(e))
		}
		n += 1 + sovAnalysis(uint64(l)) + l
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *RetentionResult) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAnalysis(uint64(m.CreatedAt))
	}
	return n
}

func (m *InactiveUsersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.InactiveDuring != nil {
		l = m.InactiveDuring.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.ActiveDuring != nil {
		l = m.ActiveDuring.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *GetActiveUsersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Period != nil {
		l = m.Period.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	return n
}

func (m *ActiveOnRangeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.CountryCodes) > 0 {
		for _, s := range m.CountryCodes {
			l = len(s)
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *GameInfoResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *GameInfoResponse_FieldInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAnalysis(uint64(m.Type))
	}
	return n
}

func (m *GameInfoResponse_EventInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAnalysis(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovAnalysis(uint64(l))
		}
	}
	return n
}

func (m *AppDataInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovAnalysis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnalysis(x uint64) (n int) {
	return sovAnalysis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildAndProfileIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildAndProfileIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildAndProfileIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildAndTimeRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildAndTimeRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildAndTimeRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &TimeRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameWithVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameWithVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameWithVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayedGamesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayedGamesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayedGamesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &GameWithVersions{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &TimeRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (QuerySort_SortOrder(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accumulator", wireType)
			}
			m.Accumulator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accumulator |= (Aggregation_Accumulator(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			m.Int = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Real", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Real = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			m.Hours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hours |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Minutes = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seconds = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (QueryGroup_GroupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &GroupInterval{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &TimeRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = append(m.Sort, &QuerySort{})
			if err := m.Sort[len(m.Sort)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupBy == nil {
				m.GroupBy = &QueryGroup{}
			}
			if err := m.GroupBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregations = append(m.Aggregations, &Aggregation{})
			if err := m.Aggregations[len(m.Aggregations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawQueries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawQueries = append(m.RawQueries, make([]byte, postIndex-iNdEx))
			copy(m.RawQueries[len(m.RawQueries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAppData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseAppData = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &GameWithVersions{})
			if err := m.Games[len(m.Games)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &AnalyzeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ActiveUsersRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalysis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dates = append(m.Dates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalysis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalysis
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalysis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dates = append(m.Dates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dates", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveUsersResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveUsersResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveUsersResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ActiveUsersRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RetentionRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalysis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dates = append(m.Dates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAnalysis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAnalysis
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAnalysis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dates = append(m.Dates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dates", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RetentionRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InactiveUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InactiveUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InactiveUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveDuring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InactiveDuring == nil {
				m.InactiveDuring = &TimeRange{}
			}
			if err := m.InactiveDuring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDuring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveDuring == nil {
				m.ActiveDuring = &TimeRange{}
			}
			if err := m.ActiveDuring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetActiveUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetActiveUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetActiveUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Period == nil {
				m.Period = &TimeRange{}
			}
			if err := m.Period.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveOnRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveOnRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveOnRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &TimeRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCodes = append(m.CountryCodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &GameInfoResponse_EventInfo{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfoResponse_FieldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GameInfoResponse_FieldType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfoResponse_EventInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &GameInfoResponse_FieldInfo{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppDataInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDataInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDataInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAnalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnalysis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnalysis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAnalysis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnalysis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnalysis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnalysis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnalysis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("analysis.proto", fileDescriptorAnalysis) }

var fileDescriptorAnalysis = []byte{
	// 1551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x17, 0x49, 0x6f, 0xdb, 0xc6,
	0xda, 0xa4, 0xf6, 0x4f, 0xb2, 0x4c, 0xcf, 0xb3, 0x63, 0x45, 0x79, 0xf1, 0x73, 0xf8, 0x8a, 0xc0,
	0x87, 0x46, 0x76, 0x14, 0x24, 0x40, 0x80, 0x14, 0xad, 0xbc, 0x56, 0xa8, 0x23, 0x25, 0x23, 0xd9,
	0x4e, 0x72, 0x11, 0xc6, 0xe2, 0x48, 0x26, 0x20, 0x91, 0x0c, 0x39, 0x74, 0xa0, 0xf6, 0xd8, 0x43,
	0x81, 0xf6, 0x52, 0xa0, 0x97, 0xf6, 0x54, 0xa0, 0xa7, 0xfe, 0x8b, 0x5e, 0x73, 0xec, 0xb5, 0xa7,
	0xb6, 0xce, 0x1f, 0x29, 0x66, 0x38, 0xa4, 0x28, 0xd9, 0x72, 0x82, 0x34, 0x17, 0x62, 0xbe, 0x65,
	0xbe, 0x7d, 0x19, 0x42, 0x91, 0x58, 0x64, 0x30, 0xf2, 0x4c, 0xaf, 0xe2, 0xb8, 0x36, 0xb3, 0x51,
	0x8a, 0x38, 0xa6, 0x73, 0x52, 0xbe, 0xd3, 0x37, 0xd9, 0xa9, 0x7f, 0x52, 0xe9, 0xda, 0xc3, 0x8d,
	0xbe, 0xdd, 0xb7, 0x37, 0x04, 0xf5, 0xc4, 0xef, 0x09, 0x48, 0x00, 0xe2, 0x14, 0xdc, 0x2a, 0xff,
	0xc7, 0x20, 0x8c, 0x78, 0x94, 0x0d, 0x6d, 0x83, 0x0e, 0xa4, 0x28, 0x7d, 0x03, 0x72, 0x6d, 0x73,
	0x48, 0x31, 0xb1, 0xfa, 0x14, 0x21, 0x48, 0xf6, 0x5c, 0x7b, 0x58, 0x52, 0xd6, 0x94, 0xf5, 0x04,
	0x16, 0x67, 0x54, 0x04, 0x95, 0xd9, 0x25, 0x55, 0x60, 0x54, 0x66, 0xeb, 0x0d, 0x40, 0xdb, 0xa7,
	0xe6, 0xc0, 0xa8, 0x59, 0xc6, 0x13, 0xd7, 0xee, 0x99, 0x03, 0x5a, 0x37, 0x3c, 0x74, 0x1d, 0xb2,
	0x5d, 0x8e, 0xed, 0x98, 0x86, 0xb8, 0x9d, 0xc3, 0x19, 0x01, 0xd7, 0x0d, 0x74, 0x13, 0xc0, 0x09,
	0x18, 0x39, 0x51, 0x15, 0xc4, 0x9c, 0x13, 0x5e, 0xd5, 0x7d, 0x58, 0x0c, 0xe5, 0x8d, 0x0d, 0x79,
	0x6f, 0x71, 0xe8, 0x36, 0xa4, 0x5c, 0x2e, 0xa2, 0x94, 0x58, 0x53, 0xd6, 0xf3, 0x55, 0xad, 0x22,
	0x42, 0x55, 0x89, 0x44, 0xe3, 0x80, 0xac, 0xef, 0x83, 0xb6, 0x4f, 0x86, 0xf4, 0xd8, 0x64, 0xa7,
	0x47, 0xd4, 0xf5, 0x4c, 0xdb, 0xf2, 0xd0, 0x0a, 0x64, 0xfa, 0x64, 0x48, 0xc7, 0x4a, 0xd3, 0x1c,
	0xac, 0x1b, 0xa8, 0x0c, 0xd9, 0x33, 0xc9, 0x54, 0x52, 0xd7, 0x12, 0xeb, 0x39, 0x1c, 0xc1, 0xfa,
	0xd7, 0x0a, 0x2c, 0x3c, 0x19, 0x90, 0x11, 0x35, 0xb8, 0x3c, 0xef, 0xc0, 0xf4, 0x18, 0xba, 0x03,
	0x29, 0x7e, 0xd3, 0x2b, 0x29, 0x6b, 0x89, 0xf5, 0x7c, 0x75, 0x45, 0x1a, 0x31, 0xad, 0x10, 0x07,
	0x5c, 0x13, 0xde, 0xaa, 0x93, 0xde, 0xbe, 0xab, 0x3b, 0x5f, 0x41, 0xee, 0xa9, 0x4f, 0xdd, 0x51,
	0xcb, 0x76, 0x19, 0x0f, 0x51, 0xcf, 0xa4, 0x03, 0xa3, 0x63, 0x91, 0x21, 0x95, 0xae, 0xe4, 0x04,
	0xa6, 0x41, 0x86, 0x14, 0x6d, 0x42, 0xca, 0x76, 0x0d, 0xea, 0x0a, 0x5d, 0xc5, 0x6a, 0x59, 0xca,
	0x8c, 0xee, 0x57, 0xf8, 0xa7, 0xc9, 0x39, 0x70, 0xc0, 0xa8, 0xdf, 0x84, 0x5c, 0x84, 0x43, 0x19,
	0x48, 0xd4, 0x5a, 0xdb, 0xda, 0x1c, 0x3f, 0xec, 0xb4, 0xb6, 0x35, 0x45, 0xff, 0x43, 0x81, 0x7c,
	0xad, 0xdf, 0x77, 0x69, 0x9f, 0x30, 0xd3, 0xb6, 0xde, 0xa6, 0xff, 0x16, 0x14, 0x6c, 0x9f, 0x39,
	0x3e, 0xeb, 0x08, 0x9c, 0x74, 0x39, 0x1f, 0xe0, 0xf6, 0x38, 0x0a, 0x7d, 0x06, 0x79, 0xd2, 0xed,
	0xfa, 0x43, 0x7f, 0x40, 0x98, 0xed, 0x0a, 0xe7, 0x8b, 0xd5, 0x55, 0x69, 0x68, 0x4c, 0x55, 0xa5,
	0x36, 0xe6, 0xc2, 0xf1, 0x2b, 0xfa, 0x1e, 0xe4, 0x63, 0x34, 0x94, 0x85, 0x64, 0xa3, 0xd9, 0xd8,
	0xd5, 0xe6, 0x50, 0x0e, 0x52, 0xdb, 0xcd, 0xc3, 0x46, 0x5b, 0x53, 0xb8, 0x03, 0xad, 0xc3, 0xc7,
	0x9a, 0xca, 0x0f, 0x8f, 0x6b, 0xcf, 0xb4, 0x84, 0x38, 0xd4, 0x1b, 0x5a, 0x52, 0x38, 0x79, 0xb4,
	0xaf, 0xa5, 0xf4, 0x1f, 0x14, 0x98, 0xdf, 0x77, 0x6d, 0xdf, 0xa9, 0x5b, 0x8c, 0xba, 0x67, 0x64,
	0x80, 0x34, 0x48, 0x98, 0x16, 0x13, 0x6e, 0xa5, 0x30, 0x3f, 0xf2, 0xb6, 0x71, 0x29, 0x19, 0x08,
	0x47, 0x54, 0x2c, 0xce, 0x1c, 0x67, 0x90, 0x91, 0x27, 0x4c, 0x4f, 0x61, 0x71, 0x46, 0x4b, 0x90,
	0x3a, 0xb5, 0x7d, 0xd7, 0x2b, 0x25, 0x05, 0x32, 0x00, 0x50, 0x09, 0x32, 0x43, 0xd3, 0xf2, 0x19,
	0xf5, 0x4a, 0xa9, 0x35, 0x65, 0x3d, 0x8b, 0x43, 0x90, 0x53, 0x3c, 0xda, 0xb5, 0x2d, 0xc3, 0x2b,
	0xa5, 0x03, 0x8a, 0x04, 0xf5, 0x6f, 0x55, 0x00, 0x91, 0x2f, 0x61, 0xda, 0xdb, 0x02, 0xbe, 0x01,
	0x49, 0x36, 0x72, 0xa8, 0xcc, 0xf7, 0x8d, 0x78, 0xbe, 0xc5, 0xfd, 0x8a, 0xf8, 0xb6, 0x47, 0x0e,
	0xc5, 0x82, 0x11, 0x6d, 0x42, 0xd6, 0x94, 0xee, 0xca, 0xc2, 0x5b, 0x0a, 0x4b, 0x38, 0x1e, 0x0a,
	0x1c, 0x71, 0x5d, 0xc8, 0x69, 0xf2, 0x42, 0x4e, 0xf5, 0x63, 0xc8, 0x45, 0x7a, 0x78, 0x3e, 0x76,
	0x08, 0xa3, 0xda, 0x1c, 0x2a, 0x40, 0x96, 0x9f, 0x98, 0x39, 0xa4, 0x9a, 0x82, 0xe6, 0x83, 0x71,
	0xd4, 0xec, 0xed, 0x90, 0x91, 0xa6, 0x0a, 0xa2, 0xe9, 0x75, 0x5d, 0xca, 0xa8, 0x96, 0x40, 0xcb,
	0xb0, 0xb8, 0x6d, 0x5b, 0xcc, 0xb4, 0x7c, 0xea, 0x85, 0x36, 0x68, 0x49, 0xfd, 0x17, 0x15, 0x52,
	0xc2, 0x19, 0x74, 0x0d, 0xd2, 0xf4, 0x8c, 0x5a, 0x2c, 0x68, 0xbc, 0x1c, 0x96, 0xd0, 0xb8, 0x8b,
	0xd4, 0x2b, 0xbb, 0x08, 0x7d, 0x04, 0x49, 0xcf, 0x76, 0x59, 0x29, 0x21, 0xda, 0x56, 0x9b, 0x6e,
	0x0c, 0x2c, 0xa8, 0x3c, 0x8d, 0x03, 0x73, 0x68, 0xb2, 0x30, 0x8d, 0x02, 0xe0, 0xba, 0xed, 0x5e,
	0xcf, 0xa3, 0x4c, 0x64, 0x31, 0x85, 0x25, 0x84, 0x3e, 0x86, 0x6c, 0x9f, 0xbb, 0xdd, 0x39, 0x19,
	0x89, 0x2c, 0xe6, 0xab, 0x8b, 0x17, 0x12, 0x80, 0x33, 0x82, 0x65, 0x6b, 0x84, 0x1e, 0x40, 0x81,
	0x8c, 0xcb, 0xdb, 0x2b, 0x65, 0x84, 0x25, 0xe8, 0x62, 0xe5, 0xe3, 0x09, 0x3e, 0xf4, 0x3f, 0xc8,
	0xbb, 0xe4, 0x55, 0xe7, 0xa5, 0x4f, 0x5d, 0x93, 0x7a, 0xa5, 0xec, 0x5a, 0x62, 0xbd, 0x80, 0xc1,
	0x25, 0xaf, 0x9e, 0x06, 0x18, 0xfd, 0x37, 0x05, 0x8a, 0x35, 0xbe, 0x45, 0xbe, 0xa4, 0x98, 0xbe,
	0xf4, 0xa9, 0xc7, 0xfe, 0xc5, 0x90, 0x5d, 0x83, 0x82, 0xef, 0xd1, 0x0e, 0x71, 0x9c, 0x0e, 0xdf,
	0x29, 0xa2, 0x46, 0xb2, 0x18, 0x7c, 0x8f, 0xd6, 0x1c, 0x67, 0x87, 0x30, 0x82, 0x74, 0x48, 0x71,
	0x5b, 0x42, 0x97, 0x0b, 0x71, 0x97, 0x71, 0x40, 0x1a, 0x4f, 0xc9, 0xcc, 0xbb, 0x4c, 0x49, 0x3e,
	0x68, 0xe7, 0x23, 0x0f, 0x3c, 0x7f, 0xc0, 0xd0, 0x06, 0x64, 0xdc, 0xc0, 0x17, 0x61, 0x7f, 0xbe,
	0xba, 0x1c, 0xc6, 0x69, 0xc2, 0x51, 0x1c, 0x72, 0x21, 0x9d, 0x37, 0x25, 0x23, 0xb2, 0x0c, 0x8a,
	0x92, 0x9b, 0x1b, 0xdc, 0xa2, 0x0c, 0x0b, 0x1a, 0x77, 0xbd, 0xeb, 0x52, 0xc2, 0xa8, 0xd1, 0x21,
	0x4c, 0x78, 0x96, 0xc0, 0x39, 0x89, 0xa9, 0x31, 0xfd, 0x57, 0x05, 0x50, 0xad, 0xcb, 0xcc, 0x33,
	0x7a, 0xe8, 0x51, 0xd7, 0x0b, 0x63, 0x59, 0x95, 0x2d, 0xa6, 0x4c, 0x4e, 0xaa, 0x0b, 0x8c, 0x95,
	0x58, 0x97, 0x2d, 0x41, 0xca, 0x20, 0xbc, 0xed, 0xf9, 0x4a, 0x49, 0xe0, 0x00, 0x40, 0xcb, 0x90,
	0xe6, 0x71, 0x35, 0x0d, 0xa1, 0x3b, 0x87, 0x53, 0xc4, 0x71, 0xea, 0x86, 0x7e, 0x17, 0x92, 0xa2,
	0x71, 0x00, 0xd2, 0x8f, 0x9b, 0x8d, 0xf6, 0xc1, 0xf3, 0x60, 0x94, 0xed, 0xd4, 0xea, 0x07, 0xcf,
	0x83, 0x51, 0xd6, 0xd8, 0x3d, 0xd6, 0x54, 0x8e, 0x6b, 0x37, 0xdb, 0xb5, 0x03, 0x2d, 0xa1, 0x7f,
	0xa7, 0xc0, 0xe2, 0x84, 0x05, 0x22, 0x68, 0xf7, 0xa6, 0x83, 0x76, 0x7d, 0xa6, 0xb1, 0x1f, 0x34,
	0x70, 0x3f, 0x29, 0xa0, 0x61, 0xca, 0xa8, 0x25, 0xaa, 0x57, 0xca, 0xdd, 0x9c, 0x08, 0xdb, 0x7f,
	0xa5, 0xdc, 0x69, 0xb6, 0xf7, 0x0e, 0xda, 0x6d, 0x19, 0xb4, 0x0c, 0x24, 0xa2, 0xe1, 0xdf, 0xda,
	0x3d, 0xda, 0x6d, 0x68, 0x0a, 0x0f, 0x64, 0xfb, 0xf3, 0x3a, 0x6e, 0x3f, 0xd7, 0x54, 0xfd, 0x1b,
	0x05, 0x16, 0x62, 0x4a, 0x45, 0x9c, 0xee, 0x4e, 0xc7, 0x69, 0x65, 0x86, 0x75, 0x1f, 0x34, 0x4a,
	0x3f, 0x2b, 0xb0, 0x54, 0xb7, 0xc8, 0xc5, 0x02, 0x1b, 0x7b, 0xa8, 0xc4, 0x3c, 0x44, 0x0f, 0x61,
	0xc1, 0x94, 0xec, 0x1d, 0xc3, 0x77, 0x4d, 0xab, 0x3f, 0x73, 0xc6, 0x15, 0x43, 0xc6, 0x1d, 0xc1,
	0x87, 0xee, 0xc3, 0xfc, 0xe4, 0xc5, 0x59, 0x4f, 0x8c, 0x42, 0xfc, 0x9a, 0xfe, 0x0c, 0x96, 0xf7,
	0x29, 0xab, 0xbd, 0xb3, 0x85, 0xeb, 0x90, 0x76, 0xa8, 0x6b, 0xda, 0xc6, 0x4c, 0xc3, 0x24, 0x5d,
	0xef, 0xc2, 0x52, 0x20, 0xb6, 0x69, 0x05, 0x04, 0x29, 0x38, 0x9a, 0xde, 0xca, 0xd5, 0xd3, 0xfb,
	0xff, 0x30, 0xdf, 0xb5, 0x7d, 0x8b, 0xb9, 0xa3, 0x4e, 0xd7, 0x36, 0x68, 0xf8, 0x54, 0x2b, 0x48,
	0xe4, 0x36, 0xc7, 0xe9, 0xe7, 0x6a, 0xf0, 0xf0, 0xab, 0x5b, 0x3d, 0x1b, 0x53, 0xcf, 0xb1, 0x2d,
	0x8f, 0xce, 0x7e, 0xf8, 0x3d, 0x8c, 0x16, 0x8a, 0x2a, 0x66, 0xd4, 0xad, 0xd8, 0x8c, 0x8a, 0x4b,
	0xa8, 0xec, 0x72, 0x2e, 0x81, 0x91, 0x17, 0xca, 0x47, 0x90, 0x13, 0x7b, 0x8f, 0x23, 0xf9, 0x6b,
	0x20, 0xb6, 0x9a, 0xc5, 0x19, 0xdd, 0x9f, 0xd8, 0xca, 0x33, 0x25, 0x0b, 0x21, 0xe3, 0x06, 0x28,
	0xbf, 0x80, 0x5c, 0xa4, 0xec, 0x52, 0xb9, 0x0f, 0x21, 0x2d, 0x76, 0xf0, 0x5b, 0x6d, 0x8e, 0xcc,
	0xc3, 0xf2, 0x82, 0xbe, 0x27, 0x6d, 0x16, 0x4d, 0x93, 0x87, 0xcc, 0x61, 0xe3, 0x8b, 0x46, 0xf3,
	0xb8, 0xa1, 0xcd, 0xf1, 0x6e, 0x69, 0xb5, 0x71, 0xbd, 0xb1, 0xaf, 0x29, 0x9c, 0x50, 0x6f, 0xb4,
	0x77, 0xf7, 0x77, 0x71, 0x30, 0x6f, 0xf6, 0x0e, 0x9a, 0xb5, 0xb6, 0x96, 0xe0, 0x3b, 0x7d, 0xab,
	0xd9, 0x3c, 0xd0, 0x92, 0xba, 0x06, 0x45, 0xb9, 0x08, 0x02, 0x85, 0x2f, 0xab, 0x7f, 0x26, 0x61,
	0xa1, 0x26, 0x7f, 0x62, 0x5a, 0xd4, 0x3d, 0x33, 0xbb, 0x14, 0xd5, 0x61, 0x7e, 0x22, 0xdf, 0xe8,
	0xc6, 0xc4, 0x24, 0x9a, 0xac, 0x82, 0x72, 0x38, 0xa6, 0x2e, 0xfe, 0x7c, 0x6c, 0x2a, 0x68, 0x07,
	0xb2, 0x61, 0xd7, 0x44, 0x52, 0x2e, 0x6b, 0xa3, 0xab, 0xa5, 0x6c, 0x43, 0x3a, 0x50, 0x8d, 0xc2,
	0x49, 0x74, 0x69, 0xa5, 0x5f, 0x2d, 0xe4, 0x53, 0xc8, 0xc7, 0x7e, 0x07, 0x50, 0x69, 0x8a, 0x37,
	0xaa, 0xda, 0xf2, 0x35, 0x49, 0x99, 0xfe, 0x79, 0x78, 0x00, 0x19, 0xb9, 0xbf, 0xd0, 0xe5, 0xfb,
	0xac, 0xbc, 0x34, 0x8d, 0x16, 0x03, 0x6b, 0x8b, 0xbf, 0x78, 0x23, 0x5b, 0xd1, 0xec, 0xb1, 0x5e,
	0x2e, 0x5d, 0x46, 0x12, 0x32, 0x1e, 0x41, 0x2e, 0x1a, 0x6f, 0x68, 0xd6, 0xc0, 0x8b, 0x2c, 0x9f,
	0x1e, 0x99, 0x8f, 0x20, 0x1b, 0x16, 0x19, 0x9a, 0xb5, 0xcd, 0xcb, 0x2b, 0x33, 0xca, 0x11, 0x7d,
	0x02, 0xf9, 0x58, 0xd1, 0x8c, 0x7d, 0x9f, 0x28, 0xa4, 0x99, 0xd7, 0xb7, 0xee, 0xbf, 0xfe, 0x7b,
	0x75, 0xee, 0xf5, 0xf9, 0xaa, 0xf2, 0xfb, 0xf9, 0xaa, 0xf2, 0xd7, 0xf9, 0xaa, 0xf2, 0xfd, 0x9b,
	0xd5, 0xb9, 0x1f, 0xdf, 0xac, 0xce, 0xc1, 0x42, 0xd7, 0x1e, 0x56, 0x6c, 0xe6, 0x99, 0x43, 0xbb,
	0xd2, 0x77, 0x9d, 0xee, 0x13, 0xe5, 0x45, 0x36, 0x00, 0x9d, 0x93, 0x93, 0xb4, 0xf8, 0x0d, 0xbe,
	0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x14, 0x61, 0xfe, 0x63, 0x0f, 0x00, 0x00,
}
