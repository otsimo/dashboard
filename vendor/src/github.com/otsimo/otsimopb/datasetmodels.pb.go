// Code generated by protoc-gen-gogo.
// source: datasetmodels.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Column_Type int32

const (
	STRING      Column_Type = 0
	INTEGER     Column_Type = 1
	REAL        Column_Type = 2
	DATE        Column_Type = 3
	DATE_TIME   Column_Type = 4
	TIME_OF_DAY Column_Type = 5
)

var Column_Type_name = map[int32]string{
	0: "STRING",
	1: "INTEGER",
	2: "REAL",
	3: "DATE",
	4: "DATE_TIME",
	5: "TIME_OF_DAY",
}
var Column_Type_value = map[string]int32{
	"STRING":      0,
	"INTEGER":     1,
	"REAL":        2,
	"DATE":        3,
	"DATE_TIME":   4,
	"TIME_OF_DAY": 5,
}

func (x Column_Type) String() string {
	return proto.EnumName(Column_Type_name, int32(x))
}
func (Column_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{0, 0} }

type Column struct {
	Type Column_Type `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.Column_Type" json:"type,omitempty"`
	Name string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{0} }

type TimeOfDay struct {
	Hours        int32 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes      int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds      int32 `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Milliseconds int32 `protobuf:"varint,4,opt,name=milliseconds,proto3" json:"milliseconds,omitempty"`
}

func (m *TimeOfDay) Reset()                    { *m = TimeOfDay{} }
func (m *TimeOfDay) String() string            { return proto.CompactTextString(m) }
func (*TimeOfDay) ProtoMessage()               {}
func (*TimeOfDay) Descriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{1} }

type RowValue struct {
	// Types that are valid to be assigned to Value:
	//	*RowValue_Str
	//	*RowValue_Int
	//	*RowValue_Real
	//	*RowValue_Date
	//	*RowValue_DateOfTime
	//	*RowValue_TimeOfDay
	Value isRowValue_Value `protobuf_oneof:"value"`
}

func (m *RowValue) Reset()                    { *m = RowValue{} }
func (m *RowValue) String() string            { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()               {}
func (*RowValue) Descriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{2} }

type isRowValue_Value interface {
	isRowValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RowValue_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,proto3,oneof"`
}
type RowValue_Int struct {
	Int int32 `protobuf:"varint,2,opt,name=int,proto3,oneof"`
}
type RowValue_Real struct {
	Real float32 `protobuf:"fixed32,3,opt,name=real,proto3,oneof"`
}
type RowValue_Date struct {
	Date int64 `protobuf:"varint,4,opt,name=date,proto3,oneof"`
}
type RowValue_DateOfTime struct {
	DateOfTime int64 `protobuf:"varint,5,opt,name=date_of_time,json=dateOfTime,proto3,oneof"`
}
type RowValue_TimeOfDay struct {
	TimeOfDay *TimeOfDay `protobuf:"bytes,6,opt,name=time_of_day,json=timeOfDay,oneof"`
}

func (*RowValue_Str) isRowValue_Value()        {}
func (*RowValue_Int) isRowValue_Value()        {}
func (*RowValue_Real) isRowValue_Value()       {}
func (*RowValue_Date) isRowValue_Value()       {}
func (*RowValue_DateOfTime) isRowValue_Value() {}
func (*RowValue_TimeOfDay) isRowValue_Value()  {}

func (m *RowValue) GetValue() isRowValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RowValue) GetStr() string {
	if x, ok := m.GetValue().(*RowValue_Str); ok {
		return x.Str
	}
	return ""
}

func (m *RowValue) GetInt() int32 {
	if x, ok := m.GetValue().(*RowValue_Int); ok {
		return x.Int
	}
	return 0
}

func (m *RowValue) GetReal() float32 {
	if x, ok := m.GetValue().(*RowValue_Real); ok {
		return x.Real
	}
	return 0
}

func (m *RowValue) GetDate() int64 {
	if x, ok := m.GetValue().(*RowValue_Date); ok {
		return x.Date
	}
	return 0
}

func (m *RowValue) GetDateOfTime() int64 {
	if x, ok := m.GetValue().(*RowValue_DateOfTime); ok {
		return x.DateOfTime
	}
	return 0
}

func (m *RowValue) GetTimeOfDay() *TimeOfDay {
	if x, ok := m.GetValue().(*RowValue_TimeOfDay); ok {
		return x.TimeOfDay
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RowValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RowValue_OneofMarshaler, _RowValue_OneofUnmarshaler, _RowValue_OneofSizer, []interface{}{
		(*RowValue_Str)(nil),
		(*RowValue_Int)(nil),
		(*RowValue_Real)(nil),
		(*RowValue_Date)(nil),
		(*RowValue_DateOfTime)(nil),
		(*RowValue_TimeOfDay)(nil),
	}
}

func _RowValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RowValue)
	// value
	switch x := m.Value.(type) {
	case *RowValue_Str:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Str)
	case *RowValue_Int:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int))
	case *RowValue_Real:
		_ = b.EncodeVarint(3<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Real)))
	case *RowValue_Date:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Date))
	case *RowValue_DateOfTime:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.DateOfTime))
	case *RowValue_TimeOfDay:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TimeOfDay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RowValue.Value has unexpected type %T", x)
	}
	return nil
}

func _RowValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RowValue)
	switch tag {
	case 1: // value.str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &RowValue_Str{x}
		return true, err
	case 2: // value.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &RowValue_Int{int32(x)}
		return true, err
	case 3: // value.real
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &RowValue_Real{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // value.date
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &RowValue_Date{int64(x)}
		return true, err
	case 5: // value.date_of_time
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &RowValue_DateOfTime{int64(x)}
		return true, err
	case 6: // value.time_of_day
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TimeOfDay)
		err := b.DecodeMessage(msg)
		m.Value = &RowValue_TimeOfDay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RowValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RowValue)
	// value
	switch x := m.Value.(type) {
	case *RowValue_Str:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Str)))
		n += len(x.Str)
	case *RowValue_Int:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int))
	case *RowValue_Real:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *RowValue_Date:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Date))
	case *RowValue_DateOfTime:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DateOfTime))
	case *RowValue_TimeOfDay:
		s := proto.Size(x.TimeOfDay)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Row struct {
	Values []*RowValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{3} }

type DataSet struct {
	Label   string    `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Columns []*Column `protobuf:"bytes,5,rep,name=columns" json:"columns,omitempty"`
	Rows    []*Row    `protobuf:"bytes,6,rep,name=rows" json:"rows,omitempty"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (m *DataSet) String() string            { return proto.CompactTextString(m) }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptorDatasetmodels, []int{4} }

func init() {
	proto.RegisterType((*Column)(nil), "apipb.Column")
	proto.RegisterType((*TimeOfDay)(nil), "apipb.TimeOfDay")
	proto.RegisterType((*RowValue)(nil), "apipb.RowValue")
	proto.RegisterType((*Row)(nil), "apipb.Row")
	proto.RegisterType((*DataSet)(nil), "apipb.DataSet")
	proto.RegisterEnum("apipb.Column_Type", Column_Type_name, Column_Type_value)
}
func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TimeOfDay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeOfDay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hours != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Hours))
	}
	if m.Minutes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Minutes))
	}
	if m.Seconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Seconds))
	}
	if m.Milliseconds != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Milliseconds))
	}
	return i, nil
}

func (m *RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *RowValue_Str) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintDatasetmodels(dAtA, i, uint64(len(m.Str)))
	i += copy(dAtA[i:], m.Str)
	return i, nil
}
func (m *RowValue_Int) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Int))
	return i, nil
}
func (m *RowValue_Real) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Datasetmodels(dAtA, i, uint32(math.Float32bits(float32(m.Real))))
	return i, nil
}
func (m *RowValue_Date) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintDatasetmodels(dAtA, i, uint64(m.Date))
	return i, nil
}
func (m *RowValue_DateOfTime) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintDatasetmodels(dAtA, i, uint64(m.DateOfTime))
	return i, nil
}
func (m *RowValue_TimeOfDay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TimeOfDay != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(m.TimeOfDay.Size()))
		n2, err := m.TimeOfDay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDatasetmodels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DataSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatasetmodels(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDatasetmodels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			dAtA[i] = 0x32
			i++
			i = encodeVarintDatasetmodels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Datasetmodels(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Datasetmodels(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDatasetmodels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Column) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDatasetmodels(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDatasetmodels(uint64(l))
	}
	return n
}

func (m *TimeOfDay) Size() (n int) {
	var l int
	_ = l
	if m.Hours != 0 {
		n += 1 + sovDatasetmodels(uint64(m.Hours))
	}
	if m.Minutes != 0 {
		n += 1 + sovDatasetmodels(uint64(m.Minutes))
	}
	if m.Seconds != 0 {
		n += 1 + sovDatasetmodels(uint64(m.Seconds))
	}
	if m.Milliseconds != 0 {
		n += 1 + sovDatasetmodels(uint64(m.Milliseconds))
	}
	return n
}

func (m *RowValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *RowValue_Str) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	n += 1 + l + sovDatasetmodels(uint64(l))
	return n
}
func (m *RowValue_Int) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDatasetmodels(uint64(m.Int))
	return n
}
func (m *RowValue_Real) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *RowValue_Date) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDatasetmodels(uint64(m.Date))
	return n
}
func (m *RowValue_DateOfTime) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDatasetmodels(uint64(m.DateOfTime))
	return n
}
func (m *RowValue_TimeOfDay) Size() (n int) {
	var l int
	_ = l
	if m.TimeOfDay != nil {
		l = m.TimeOfDay.Size()
		n += 1 + l + sovDatasetmodels(uint64(l))
	}
	return n
}
func (m *Row) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDatasetmodels(uint64(l))
		}
	}
	return n
}

func (m *DataSet) Size() (n int) {
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovDatasetmodels(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovDatasetmodels(uint64(l))
		}
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovDatasetmodels(uint64(l))
		}
	}
	return n
}

func sovDatasetmodels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDatasetmodels(x uint64) (n int) {
	return sovDatasetmodels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Column_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmodels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeOfDay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeOfDay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeOfDay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hours", wireType)
			}
			m.Hours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hours |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			m.Minutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minutes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milliseconds", wireType)
			}
			m.Milliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Milliseconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmodels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &RowValue_Str{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &RowValue_Int{v}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Real", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Value = &RowValue_Real{float32(math.Float32frombits(v))}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &RowValue_Date{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &RowValue_DateOfTime{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOfDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TimeOfDay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RowValue_TimeOfDay{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmodels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &RowValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmodels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasetmodels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatasetmodels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatasetmodels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatasetmodels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasetmodels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDatasetmodels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDatasetmodels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDatasetmodels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDatasetmodels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatasetmodels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("datasetmodels.proto", fileDescriptorDatasetmodels) }

var fileDescriptorDatasetmodels = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6e, 0xda, 0x4e,
	0x10, 0xc7, 0xbd, 0xf1, 0x1f, 0xc2, 0xf0, 0xcb, 0x0f, 0x6b, 0x9b, 0x83, 0xd5, 0x83, 0x85, 0x7c,
	0x68, 0xb8, 0xd4, 0x91, 0xe8, 0xa9, 0x47, 0x52, 0x68, 0x40, 0x6a, 0x43, 0xb5, 0x58, 0x95, 0xda,
	0x0b, 0x5a, 0xc3, 0x02, 0x96, 0x6c, 0xaf, 0x65, 0xaf, 0x8b, 0x78, 0x8b, 0x1e, 0xdb, 0xa7, 0xe9,
	0x35, 0xc7, 0x3c, 0x42, 0x43, 0x5e, 0xa4, 0x9a, 0x35, 0xb4, 0xca, 0xc9, 0xf3, 0xf9, 0x7e, 0x67,
	0x77, 0x66, 0xd6, 0x03, 0x2f, 0x56, 0x5c, 0xf1, 0x4a, 0xa8, 0x4c, 0xae, 0x44, 0x5a, 0x85, 0x45,
	0x29, 0x95, 0xa4, 0x36, 0x2f, 0x92, 0x22, 0x7e, 0xf9, 0x7a, 0x93, 0xa8, 0x6d, 0x1d, 0x87, 0x4b,
	0x99, 0x5d, 0x6f, 0xe4, 0x46, 0x5e, 0x6b, 0x37, 0xae, 0xd7, 0x9a, 0x34, 0xe8, 0xa8, 0x39, 0x15,
	0xfc, 0x24, 0xe0, 0xbc, 0x93, 0x69, 0x9d, 0xe5, 0xf4, 0x15, 0x58, 0x6a, 0x5f, 0x08, 0x8f, 0xf4,
	0x48, 0xff, 0xff, 0x01, 0x0d, 0xf5, 0x7d, 0x61, 0x63, 0x86, 0xd1, 0xbe, 0x10, 0x4c, 0xfb, 0x94,
	0x82, 0x95, 0xf3, 0x4c, 0x78, 0x67, 0x3d, 0xd2, 0x6f, 0x33, 0x1d, 0x07, 0x73, 0xb0, 0x30, 0x83,
	0x02, 0x38, 0xf3, 0x88, 0x4d, 0xef, 0x6e, 0x5d, 0x83, 0x76, 0xa0, 0x35, 0xbd, 0x8b, 0xc6, 0xb7,
	0x63, 0xe6, 0x12, 0x7a, 0x0e, 0x16, 0x1b, 0x0f, 0x3f, 0xb8, 0x67, 0x18, 0x8d, 0x86, 0xd1, 0xd8,
	0x35, 0xe9, 0x05, 0xb4, 0x31, 0x5a, 0x44, 0xd3, 0x8f, 0x63, 0xd7, 0xa2, 0x5d, 0xe8, 0x60, 0xb4,
	0x98, 0xbd, 0x5f, 0x8c, 0x86, 0x5f, 0x5c, 0x3b, 0xd8, 0x43, 0x3b, 0x4a, 0x32, 0x31, 0x5b, 0x8f,
	0xf8, 0x9e, 0x5e, 0x82, 0xbd, 0x95, 0x75, 0x59, 0xe9, 0xf6, 0x6c, 0xd6, 0x00, 0xf5, 0xa0, 0x95,
	0x25, 0x79, 0xad, 0x44, 0xa5, 0xdb, 0xb1, 0xd9, 0x09, 0xd1, 0xa9, 0xc4, 0x52, 0xe6, 0xab, 0xca,
	0x33, 0x1b, 0xe7, 0x88, 0x34, 0x80, 0xff, 0xb2, 0x24, 0x4d, 0x93, 0x93, 0x6d, 0x69, 0xfb, 0x99,
	0x16, 0xfc, 0x22, 0x70, 0xce, 0xe4, 0xee, 0x33, 0x4f, 0x6b, 0x1c, 0xd8, 0xac, 0x54, 0xa9, 0x0b,
	0xb7, 0x27, 0x06, 0x43, 0x40, 0x2d, 0xc9, 0x55, 0x53, 0x14, 0xb5, 0x24, 0x57, 0xf4, 0x12, 0xac,
	0x52, 0xf0, 0x54, 0xd7, 0x3b, 0x9b, 0x18, 0x4c, 0x13, 0xaa, 0x2b, 0xae, 0x84, 0x2e, 0x63, 0xa2,
	0x8a, 0x84, 0x4d, 0xe0, 0x77, 0x21, 0xd7, 0x0b, 0x95, 0x64, 0xc2, 0xb3, 0x8f, 0x2e, 0xa0, 0x3a,
	0x5b, 0xe3, 0xdc, 0x74, 0x00, 0x1d, 0xf4, 0x30, 0x67, 0xc5, 0xf7, 0x9e, 0xd3, 0x23, 0xfd, 0xce,
	0xc0, 0x3d, 0xfe, 0x97, 0xbf, 0x2f, 0x33, 0x31, 0x58, 0x5b, 0x9d, 0xe0, 0xa6, 0x05, 0xf6, 0x37,
	0x6c, 0x3a, 0x08, 0xc1, 0x64, 0x72, 0x47, 0xaf, 0xc0, 0xd1, 0x8c, 0xef, 0x66, 0xf6, 0x3b, 0x83,
	0xee, 0xf1, 0xf8, 0x69, 0x38, 0x76, 0xb4, 0x83, 0x2d, 0xb4, 0x46, 0x5c, 0xf1, 0xb9, 0xc0, 0x39,
	0xec, 0x94, 0xc7, 0x22, 0x6d, 0x26, 0x66, 0x0d, 0xd0, 0x2b, 0x68, 0x2d, 0xf5, 0x2e, 0x54, 0x9e,
	0xad, 0xaf, 0xba, 0x78, 0xb6, 0x21, 0xec, 0xe4, 0x52, 0x1f, 0xac, 0x52, 0xee, 0x2a, 0xcf, 0xd1,
	0x59, 0xf0, 0xaf, 0x20, 0xd3, 0xfa, 0xcd, 0xdb, 0xfb, 0x47, 0xdf, 0x78, 0x78, 0xf4, 0x8d, 0xfb,
	0x83, 0x4f, 0x1e, 0x0e, 0x3e, 0xf9, 0x7d, 0xf0, 0xc9, 0xf7, 0x27, 0xdf, 0xf8, 0xf1, 0xe4, 0x1b,
	0xd0, 0x5d, 0xca, 0x2c, 0x94, 0xaa, 0x4a, 0x32, 0x19, 0x6e, 0xca, 0x62, 0xf9, 0x89, 0x7c, 0x3d,
	0x6f, 0xb0, 0x88, 0x63, 0x47, 0x2f, 0xed, 0x9b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xc7,
	0xc5, 0x03, 0x01, 0x03, 0x00, 0x00,
}
