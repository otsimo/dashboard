// Code generated by protoc-gen-gogo.
// source: simplyanalysis.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataInterval int32

const (
	HOURLY DataInterval = 0
	DAILY  DataInterval = 1
)

var DataInterval_name = map[int32]string{
	0: "HOURLY",
	1: "DAILY",
}
var DataInterval_value = map[string]int32{
	"HOURLY": 0,
	"DAILY":  1,
}

func (x DataInterval) String() string {
	return proto.EnumName(DataInterval_name, int32(x))
}
func (DataInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptorSimplyanalysis, []int{0} }

type GamePlayingRequest struct {
	Games []string `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	// From is the unix seconds time
	From int64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	// To is the unix seconds time
	To       int64        `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Interval DataInterval `protobuf:"varint,4,opt,name=interval,proto3,enum=apipb.DataInterval" json:"interval,omitempty"`
}

func (m *GamePlayingRequest) Reset()                    { *m = GamePlayingRequest{} }
func (m *GamePlayingRequest) String() string            { return proto.CompactTextString(m) }
func (*GamePlayingRequest) ProtoMessage()               {}
func (*GamePlayingRequest) Descriptor() ([]byte, []int) { return fileDescriptorSimplyanalysis, []int{0} }

type GamePlayingReply struct {
	Data *DataSet `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GamePlayingReply) Reset()                    { *m = GamePlayingReply{} }
func (m *GamePlayingReply) String() string            { return proto.CompactTextString(m) }
func (*GamePlayingReply) ProtoMessage()               {}
func (*GamePlayingReply) Descriptor() ([]byte, []int) { return fileDescriptorSimplyanalysis, []int{1} }

func init() {
	proto.RegisterType((*GamePlayingRequest)(nil), "apipb.GamePlayingRequest")
	proto.RegisterType((*GamePlayingReply)(nil), "apipb.GamePlayingReply")
	proto.RegisterEnum("apipb.DataInterval", DataInterval_name, DataInterval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimplifiedAnalytics service

type SimplifiedAnalyticsClient interface {
	GamePlayingDuration(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error)
	GameSuccessFailure(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error)
}

type simplifiedAnalyticsClient struct {
	cc *grpc.ClientConn
}

func NewSimplifiedAnalyticsClient(cc *grpc.ClientConn) SimplifiedAnalyticsClient {
	return &simplifiedAnalyticsClient{cc}
}

func (c *simplifiedAnalyticsClient) GamePlayingDuration(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error) {
	out := new(GamePlayingReply)
	err := grpc.Invoke(ctx, "/apipb.SimplifiedAnalytics/GamePlayingDuration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simplifiedAnalyticsClient) GameSuccessFailure(ctx context.Context, in *GamePlayingRequest, opts ...grpc.CallOption) (*GamePlayingReply, error) {
	out := new(GamePlayingReply)
	err := grpc.Invoke(ctx, "/apipb.SimplifiedAnalytics/GameSuccessFailure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimplifiedAnalytics service

type SimplifiedAnalyticsServer interface {
	GamePlayingDuration(context.Context, *GamePlayingRequest) (*GamePlayingReply, error)
	GameSuccessFailure(context.Context, *GamePlayingRequest) (*GamePlayingReply, error)
}

func RegisterSimplifiedAnalyticsServer(s *grpc.Server, srv SimplifiedAnalyticsServer) {
	s.RegisterService(&_SimplifiedAnalytics_serviceDesc, srv)
}

func _SimplifiedAnalytics_GamePlayingDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimplifiedAnalyticsServer).GamePlayingDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SimplifiedAnalytics/GamePlayingDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimplifiedAnalyticsServer).GamePlayingDuration(ctx, req.(*GamePlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimplifiedAnalytics_GameSuccessFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimplifiedAnalyticsServer).GameSuccessFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SimplifiedAnalytics/GameSuccessFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimplifiedAnalyticsServer).GameSuccessFailure(ctx, req.(*GamePlayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimplifiedAnalytics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.SimplifiedAnalytics",
	HandlerType: (*SimplifiedAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GamePlayingDuration",
			Handler:    _SimplifiedAnalytics_GamePlayingDuration_Handler,
		},
		{
			MethodName: "GameSuccessFailure",
			Handler:    _SimplifiedAnalytics_GameSuccessFailure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simplyanalysis.proto",
}

func (m *GamePlayingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.To))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.Interval))
	}
	return i, nil
}

func (m *GamePlayingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSimplyanalysis(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Simplyanalysis(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Simplyanalysis(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSimplyanalysis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GamePlayingRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Games) > 0 {
		for _, s := range m.Games {
			l = len(s)
			n += 1 + l + sovSimplyanalysis(uint64(l))
		}
	}
	if m.From != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.To))
	}
	if m.Interval != 0 {
		n += 1 + sovSimplyanalysis(uint64(m.Interval))
	}
	return n
}

func (m *GamePlayingReply) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSimplyanalysis(uint64(l))
	}
	return n
}

func sovSimplyanalysis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSimplyanalysis(x uint64) (n int) {
	return sovSimplyanalysis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GamePlayingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (DataInterval(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSimplyanalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlayingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataSet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSimplyanalysis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSimplyanalysis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSimplyanalysis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSimplyanalysis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSimplyanalysis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSimplyanalysis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSimplyanalysis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSimplyanalysis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSimplyanalysis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSimplyanalysis   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("simplyanalysis.proto", fileDescriptorSimplyanalysis) }

var fileDescriptorSimplyanalysis = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x86, 0x33, 0x49, 0x7b, 0xb9, 0x1d, 0xa5, 0x96, 0x49, 0xc1, 0xd8, 0x45, 0x08, 0x01, 0x21,
	0x08, 0xa6, 0x50, 0xc1, 0xad, 0x54, 0x8a, 0x5a, 0x2d, 0xb4, 0x24, 0xba, 0xa8, 0xbb, 0x49, 0x3a,
	0x8d, 0x03, 0x33, 0x99, 0x31, 0x33, 0x11, 0xb2, 0xf2, 0x15, 0x5c, 0xba, 0xf6, 0x01, 0x7c, 0x8e,
	0x2e, 0xfb, 0x08, 0xb6, 0x7d, 0x11, 0xe9, 0xa4, 0x48, 0x45, 0x57, 0x77, 0x77, 0xfe, 0xf3, 0x1f,
	0xfe, 0x73, 0xe6, 0x1b, 0x38, 0x54, 0x94, 0x4b, 0xd6, 0xe0, 0x12, 0xb3, 0x46, 0x51, 0x15, 0xcb,
	0x4a, 0x68, 0x81, 0xba, 0x58, 0x52, 0x99, 0x8d, 0xdc, 0x0d, 0xd6, 0x58, 0x11, 0xcd, 0xc5, 0x86,
	0xb0, 0x8b, 0x37, 0x7a, 0x5a, 0x50, 0xfd, 0xa9, 0xce, 0xe2, 0x5c, 0xf0, 0x71, 0x21, 0x0a, 0x31,
	0x36, 0xed, 0xac, 0xde, 0x1a, 0x65, 0x84, 0xa9, 0xda, 0xf1, 0xf0, 0x2b, 0x44, 0xaf, 0x31, 0x27,
	0x2b, 0x86, 0x1b, 0x5a, 0x16, 0x09, 0xf9, 0x5c, 0x13, 0xa5, 0xd1, 0x10, 0x76, 0x0b, 0xcc, 0x89,
	0xf2, 0x40, 0xe0, 0x44, 0xbd, 0xa4, 0x15, 0x08, 0xc1, 0xce, 0xb6, 0x12, 0xdc, 0xb3, 0x03, 0x10,
	0x39, 0x89, 0xa9, 0x51, 0x1f, 0xda, 0x5a, 0x78, 0x8e, 0xe9, 0xd8, 0x5a, 0xa0, 0x31, 0xbc, 0xa5,
	0xa5, 0x26, 0xd5, 0x17, 0xcc, 0xbc, 0x4e, 0x00, 0xa2, 0xfe, 0xc4, 0x8d, 0xcd, 0xb5, 0xf1, 0x0c,
	0x6b, 0x3c, 0xbf, 0x58, 0xc9, 0x9f, 0xa1, 0xf0, 0x39, 0x1c, 0xfc, 0x75, 0x80, 0x64, 0x0d, 0x0a,
	0x61, 0xe7, 0xfc, 0x34, 0x0f, 0x04, 0x20, 0xba, 0x37, 0xe9, 0x5f, 0x05, 0xa4, 0x44, 0x27, 0xc6,
	0x7b, 0xf2, 0x18, 0xde, 0xbf, 0x4e, 0x44, 0x10, 0xde, 0xbc, 0x59, 0x7e, 0x48, 0x16, 0xeb, 0x81,
	0x85, 0x7a, 0xb0, 0x3b, 0x9b, 0xce, 0x17, 0xeb, 0x01, 0x98, 0xfc, 0x04, 0xd0, 0x4d, 0xcf, 0x0c,
	0xe9, 0x96, 0x92, 0xcd, 0xf4, 0xcc, 0x51, 0xd3, 0x5c, 0xa1, 0x77, 0xd0, 0xbd, 0x5a, 0x3b, 0xab,
	0x2b, 0xac, 0xa9, 0x28, 0xd1, 0xa3, 0xcb, 0xae, 0x7f, 0x99, 0x8c, 0x1e, 0xfe, 0xcf, 0x92, 0xac,
	0x09, 0x2d, 0xf4, 0xb6, 0x85, 0x98, 0xd6, 0x79, 0x4e, 0x94, 0x7a, 0x85, 0x29, 0xab, 0x2b, 0x72,
	0xb7, 0xac, 0x97, 0x2f, 0x76, 0x07, 0xdf, 0xda, 0x1f, 0x7c, 0x6b, 0x77, 0xf4, 0xc1, 0xfe, 0xe8,
	0x83, 0x5f, 0x47, 0x1f, 0x7c, 0x3b, 0xf9, 0xd6, 0xf7, 0x93, 0x6f, 0xc1, 0x07, 0xb9, 0xe0, 0xb1,
	0xd0, 0x8a, 0x72, 0x11, 0x17, 0x95, 0xcc, 0x57, 0xe0, 0xe3, 0x6d, 0x2b, 0x65, 0xf6, 0xc3, 0x76,
	0x96, 0xef, 0xd3, 0xec, 0xc6, 0x7c, 0xec, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x1a,
	0x3e, 0x98, 0x3b, 0x02, 0x00, 0x00,
}
