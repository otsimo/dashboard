// Code generated by protoc-gen-gogo.
// source: listener.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeviceInfo struct {
	VendorId           string `protobuf:"bytes,1,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	ClientSdk          string `protobuf:"bytes,2,opt,name=clientSdk,proto3" json:"clientSdk,omitempty"`
	BundleIdentifier   string `protobuf:"bytes,3,opt,name=bundleIdentifier,proto3" json:"bundleIdentifier,omitempty"`
	BundleVersion      string `protobuf:"bytes,4,opt,name=bundleVersion,proto3" json:"bundleVersion,omitempty"`
	BundleShortVersion string `protobuf:"bytes,5,opt,name=bundleShortVersion,proto3" json:"bundleShortVersion,omitempty"`
	DeviceType         string `protobuf:"bytes,6,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
	DeviceName         string `protobuf:"bytes,7,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	OsName             string `protobuf:"bytes,8,opt,name=osName,proto3" json:"osName,omitempty"`
	SystemVersion      string `protobuf:"bytes,9,opt,name=systemVersion,proto3" json:"systemVersion,omitempty"`
	LanguageCode       string `protobuf:"bytes,10,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
	CountryCode        string `protobuf:"bytes,11,opt,name=countryCode,proto3" json:"countryCode,omitempty"`
}

func (m *DeviceInfo) Reset()                    { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()               {}
func (*DeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{0} }

type GameInfo struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (m *GameInfo) Reset()                    { *m = GameInfo{} }
func (m *GameInfo) String() string            { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()               {}
func (*GameInfo) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{1} }

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
type Point struct {
	Latitude  int32 `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{2} }

type Vector3 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{3} }

type MotionData struct {
	Gravity          *Vector3 `protobuf:"bytes,1,opt,name=gravity" json:"gravity,omitempty"`
	UserAcceleration *Vector3 `protobuf:"bytes,2,opt,name=user_acceleration,json=userAcceleration" json:"user_acceleration,omitempty"`
	RotationRate     *Vector3 `protobuf:"bytes,3,opt,name=rotation_rate,json=rotationRate" json:"rotation_rate,omitempty"`
	Attitude         *Vector3 `protobuf:"bytes,4,opt,name=attitude" json:"attitude,omitempty"`
}

func (m *MotionData) Reset()                    { *m = MotionData{} }
func (m *MotionData) String() string            { return proto.CompactTextString(m) }
func (*MotionData) ProtoMessage()               {}
func (*MotionData) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{4} }

type GestureData struct {
	Velocity float32 `protobuf:"fixed32,1,opt,name=velocity,proto3" json:"velocity,omitempty"`
	Width    float32 `protobuf:"fixed32,2,opt,name=width,proto3" json:"width,omitempty"`
	Height   float32 `protobuf:"fixed32,3,opt,name=height,proto3" json:"height,omitempty"`
	Duration float32 `protobuf:"fixed32,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *GestureData) Reset()                    { *m = GestureData{} }
func (m *GestureData) String() string            { return proto.CompactTextString(m) }
func (*GestureData) ProtoMessage()               {}
func (*GestureData) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{5} }

type Event struct {
	// UserId is profile id or child id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Child is secondary id
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// Event the event name
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	// Timestamp is seconds unix time
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Game is the game information
	Game *GameInfo `protobuf:"bytes,5,opt,name=game" json:"game,omitempty"`
	// Device is device information,
	Device *DeviceInfo `protobuf:"bytes,6,opt,name=device" json:"device,omitempty"`
	// AppId is the client app id
	AppId string `protobuf:"bytes,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Loc is the location of user
	Loc *Point `protobuf:"bytes,8,opt,name=loc" json:"loc,omitempty"`
	// EventId is Client side event id in order to track whether event is delivered successfully
	EventId string `protobuf:"bytes,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,10,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// Payload is a json data
	Payload []byte `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
	// Age is child's age in month
	Age int32 `protobuf:"varint,12,opt,name=age,proto3" json:"age,omitempty"`
	// Child gender
	Gender Gender `protobuf:"varint,13,opt,name=gender,proto3,enum=apipb.Gender" json:"gender,omitempty"`
	// MotionData keeps motion data of device
	MotionData *MotionData `protobuf:"bytes,14,opt,name=motion_data,json=motionData" json:"motion_data,omitempty"`
	//
	GestureData *GestureData `protobuf:"bytes,15,opt,name=gesture_data,json=gestureData" json:"gesture_data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{6} }

type AppEventData struct {
	Event     string      `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	AppId     string      `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Device    *DeviceInfo `protobuf:"bytes,3,opt,name=device" json:"device,omitempty"`
	Timestamp int64       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload   []byte      `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Loc       *Point      `protobuf:"bytes,6,opt,name=loc" json:"loc,omitempty"`
	// EventId is Client side event id in order to track whether event is delivered successfully
	EventId string `protobuf:"bytes,7,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,8,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// UserId is profile id or child id
	UserId string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *AppEventData) Reset()                    { *m = AppEventData{} }
func (m *AppEventData) String() string            { return proto.CompactTextString(m) }
func (*AppEventData) ProtoMessage()               {}
func (*AppEventData) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{7} }

type BatchEventData struct {
	// Event the event name
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// EventId is Client side event id in order to track whether event is delivered successfully
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Timestamp is seconds unix time
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Game is the game information
	Game *GameInfo `protobuf:"bytes,4,opt,name=game" json:"game,omitempty"`
	// Loc is the location of user
	Loc *Point `protobuf:"bytes,5,opt,name=loc" json:"loc,omitempty"`
	// IsResend is true if client is trying to send a failed event
	IsResend bool `protobuf:"varint,6,opt,name=is_resend,json=isResend,proto3" json:"is_resend,omitempty"`
	// Payload is a json data
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// MotionData keeps motion data of device
	MotionData *MotionData `protobuf:"bytes,8,opt,name=motion_data,json=motionData" json:"motion_data,omitempty"`
	//
	GestureData *GestureData `protobuf:"bytes,9,opt,name=gesture_data,json=gestureData" json:"gesture_data,omitempty"`
}

func (m *BatchEventData) Reset()                    { *m = BatchEventData{} }
func (m *BatchEventData) String() string            { return proto.CompactTextString(m) }
func (*BatchEventData) ProtoMessage()               {}
func (*BatchEventData) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{8} }

type BatchEvent struct {
	// UserId is profile id or child id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Child is secondary id
	ChildId string `protobuf:"bytes,2,opt,name=child_id,json=childId,proto3" json:"child_id,omitempty"`
	// AppId is the client app id
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Device is device information,
	Device *DeviceInfo `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
	// Age is child's age in month
	Age int32 `protobuf:"varint,6,opt,name=age,proto3" json:"age,omitempty"`
	// Child Gender
	Gender Gender `protobuf:"varint,7,opt,name=gender,proto3,enum=apipb.Gender" json:"gender,omitempty"`
	// Data is
	Data []*BatchEventData `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *BatchEvent) Reset()                    { *m = BatchEvent{} }
func (m *BatchEvent) String() string            { return proto.CompactTextString(m) }
func (*BatchEvent) ProtoMessage()               {}
func (*BatchEvent) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{9} }

type EventResponse struct {
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptorListener, []int{10} }

func init() {
	proto.RegisterType((*DeviceInfo)(nil), "apipb.DeviceInfo")
	proto.RegisterType((*GameInfo)(nil), "apipb.GameInfo")
	proto.RegisterType((*Point)(nil), "apipb.Point")
	proto.RegisterType((*Vector3)(nil), "apipb.Vector3")
	proto.RegisterType((*MotionData)(nil), "apipb.MotionData")
	proto.RegisterType((*GestureData)(nil), "apipb.GestureData")
	proto.RegisterType((*Event)(nil), "apipb.Event")
	proto.RegisterType((*AppEventData)(nil), "apipb.AppEventData")
	proto.RegisterType((*BatchEventData)(nil), "apipb.BatchEventData")
	proto.RegisterType((*BatchEvent)(nil), "apipb.BatchEvent")
	proto.RegisterType((*EventResponse)(nil), "apipb.EventResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ListenerService service

type ListenerServiceClient interface {
	AppEvent(ctx context.Context, in *AppEventData, opts ...grpc.CallOption) (*EventResponse, error)
	CustomEvent(ctx context.Context, opts ...grpc.CallOption) (ListenerService_CustomEventClient, error)
	BatchStream(ctx context.Context, opts ...grpc.CallOption) (ListenerService_BatchStreamClient, error)
}

type listenerServiceClient struct {
	cc *grpc.ClientConn
}

func NewListenerServiceClient(cc *grpc.ClientConn) ListenerServiceClient {
	return &listenerServiceClient{cc}
}

func (c *listenerServiceClient) AppEvent(ctx context.Context, in *AppEventData, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/apipb.ListenerService/AppEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerServiceClient) CustomEvent(ctx context.Context, opts ...grpc.CallOption) (ListenerService_CustomEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ListenerService_serviceDesc.Streams[0], c.cc, "/apipb.ListenerService/CustomEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &listenerServiceCustomEventClient{stream}
	return x, nil
}

type ListenerService_CustomEventClient interface {
	Send(*Event) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type listenerServiceCustomEventClient struct {
	grpc.ClientStream
}

func (x *listenerServiceCustomEventClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listenerServiceCustomEventClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *listenerServiceClient) BatchStream(ctx context.Context, opts ...grpc.CallOption) (ListenerService_BatchStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ListenerService_serviceDesc.Streams[1], c.cc, "/apipb.ListenerService/BatchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &listenerServiceBatchStreamClient{stream}
	return x, nil
}

type ListenerService_BatchStreamClient interface {
	Send(*BatchEvent) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type listenerServiceBatchStreamClient struct {
	grpc.ClientStream
}

func (x *listenerServiceBatchStreamClient) Send(m *BatchEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listenerServiceBatchStreamClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ListenerService service

type ListenerServiceServer interface {
	AppEvent(context.Context, *AppEventData) (*EventResponse, error)
	CustomEvent(ListenerService_CustomEventServer) error
	BatchStream(ListenerService_BatchStreamServer) error
}

func RegisterListenerServiceServer(s *grpc.Server, srv ListenerServiceServer) {
	s.RegisterService(&_ListenerService_serviceDesc, srv)
}

func _ListenerService_AppEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppEventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerServiceServer).AppEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ListenerService/AppEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerServiceServer).AppEvent(ctx, req.(*AppEventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerService_CustomEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerServiceServer).CustomEvent(&listenerServiceCustomEventServer{stream})
}

type ListenerService_CustomEventServer interface {
	Send(*EventResponse) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type listenerServiceCustomEventServer struct {
	grpc.ServerStream
}

func (x *listenerServiceCustomEventServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listenerServiceCustomEventServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ListenerService_BatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListenerServiceServer).BatchStream(&listenerServiceBatchStreamServer{stream})
}

type ListenerService_BatchStreamServer interface {
	Send(*EventResponse) error
	Recv() (*BatchEvent, error)
	grpc.ServerStream
}

type listenerServiceBatchStreamServer struct {
	grpc.ServerStream
}

func (x *listenerServiceBatchStreamServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listenerServiceBatchStreamServer) Recv() (*BatchEvent, error) {
	m := new(BatchEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ListenerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.ListenerService",
	HandlerType: (*ListenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppEvent",
			Handler:    _ListenerService_AppEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CustomEvent",
			Handler:       _ListenerService_CustomEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchStream",
			Handler:       _ListenerService_BatchStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "listener.proto",
}

func (m *DeviceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VendorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.VendorId)))
		i += copy(dAtA[i:], m.VendorId)
	}
	if len(m.ClientSdk) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ClientSdk)))
		i += copy(dAtA[i:], m.ClientSdk)
	}
	if len(m.BundleIdentifier) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleIdentifier)))
		i += copy(dAtA[i:], m.BundleIdentifier)
	}
	if len(m.BundleVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleVersion)))
		i += copy(dAtA[i:], m.BundleVersion)
	}
	if len(m.BundleShortVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.BundleShortVersion)))
		i += copy(dAtA[i:], m.BundleShortVersion)
	}
	if len(m.DeviceType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.DeviceType)))
		i += copy(dAtA[i:], m.DeviceType)
	}
	if len(m.DeviceName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.DeviceName)))
		i += copy(dAtA[i:], m.DeviceName)
	}
	if len(m.OsName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.OsName)))
		i += copy(dAtA[i:], m.OsName)
	}
	if len(m.SystemVersion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.SystemVersion)))
		i += copy(dAtA[i:], m.SystemVersion)
	}
	if len(m.LanguageCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.LanguageCode)))
		i += copy(dAtA[i:], m.LanguageCode)
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	return i, nil
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Language) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Language)))
		i += copy(dAtA[i:], m.Language)
	}
	return i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Latitude != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Latitude))
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Longitude))
	}
	return i, nil
}

func (m *Vector3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector3) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	}
	return i, nil
}

func (m *MotionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MotionData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gravity != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Gravity.Size()))
		n1, err := m.Gravity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UserAcceleration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.UserAcceleration.Size()))
		n2, err := m.UserAcceleration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RotationRate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.RotationRate.Size()))
		n3, err := m.RotationRate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Attitude != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Attitude.Size()))
		n4, err := m.Attitude.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GestureData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GestureData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Velocity != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Velocity))))
	}
	if m.Width != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Width))))
	}
	if m.Height != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Height))))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Listener(dAtA, i, uint32(math.Float32bits(float32(m.Duration))))
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if m.Game != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Game.Size()))
		n5, err := m.Game.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Device != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n6, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Loc != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Loc.Size()))
		n7, err := m.Loc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.IsResend {
		dAtA[i] = 0x50
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Age != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Age))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Gender))
	}
	if m.MotionData != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.MotionData.Size()))
		n8, err := m.MotionData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.GestureData != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.GestureData.Size()))
		n9, err := m.GestureData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AppEventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppEventData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Device != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n10, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Loc != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Loc.Size()))
		n11, err := m.Loc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.IsResend {
		dAtA[i] = 0x40
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *BatchEventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchEventData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.EventId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Timestamp))
	}
	if m.Game != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Game.Size()))
		n12, err := m.Game.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Loc != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Loc.Size()))
		n13, err := m.Loc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.IsResend {
		dAtA[i] = 0x30
		i++
		if m.IsResend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.MotionData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.MotionData.Size()))
		n14, err := m.MotionData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.GestureData != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.GestureData.Size()))
		n15, err := m.GestureData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *BatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ChildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.ChildId)))
		i += copy(dAtA[i:], m.ChildId)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Device != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Device.Size()))
		n16, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintListener(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Age != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Age))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintListener(dAtA, i, uint64(m.Gender))
	}
	return i, nil
}

func (m *EventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintListener(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.Success {
		dAtA[i] = 0x10
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Listener(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Listener(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintListener(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.VendorId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ClientSdk)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleIdentifier)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.BundleShortVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.DeviceType)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.OsName)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.LanguageCode)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *GameInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *Point) Size() (n int) {
	var l int
	_ = l
	if m.Latitude != 0 {
		n += 1 + sovListener(uint64(m.Latitude))
	}
	if m.Longitude != 0 {
		n += 1 + sovListener(uint64(m.Longitude))
	}
	return n
}

func (m *Vector3) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	return n
}

func (m *MotionData) Size() (n int) {
	var l int
	_ = l
	if m.Gravity != nil {
		l = m.Gravity.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.UserAcceleration != nil {
		l = m.UserAcceleration.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.RotationRate != nil {
		l = m.RotationRate.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Attitude != nil {
		l = m.Attitude.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *GestureData) Size() (n int) {
	var l int
	_ = l
	if m.Velocity != 0 {
		n += 5
	}
	if m.Width != 0 {
		n += 5
	}
	if m.Height != 0 {
		n += 5
	}
	if m.Duration != 0 {
		n += 5
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovListener(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovListener(uint64(m.Gender))
	}
	if m.MotionData != nil {
		l = m.MotionData.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.GestureData != nil {
		l = m.GestureData.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *AppEventData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *BatchEventData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovListener(uint64(m.Timestamp))
	}
	if m.Game != nil {
		l = m.Game.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Loc != nil {
		l = m.Loc.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.IsResend {
		n += 2
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.MotionData != nil {
		l = m.MotionData.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if m.GestureData != nil {
		l = m.GestureData.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	return n
}

func (m *BatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.ChildId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovListener(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovListener(uint64(l))
		}
	}
	if m.Age != 0 {
		n += 1 + sovListener(uint64(m.Age))
	}
	if m.Gender != 0 {
		n += 1 + sovListener(uint64(m.Gender))
	}
	return n
}

func (m *EventResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovListener(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func sovListener(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozListener(x uint64) (n int) {
	return sovListener(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSdk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSdk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleShortVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleShortVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LanguageCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			m.Latitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Latitude |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			m.Longitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Longitude |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MotionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MotionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MotionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gravity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gravity == nil {
				m.Gravity = &Vector3{}
			}
			if err := m.Gravity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcceleration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAcceleration == nil {
				m.UserAcceleration = &Vector3{}
			}
			if err := m.UserAcceleration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RotationRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RotationRate == nil {
				m.RotationRate = &Vector3{}
			}
			if err := m.RotationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attitude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attitude == nil {
				m.Attitude = &Vector3{}
			}
			if err := m.Attitude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GestureData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GestureData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GestureData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Velocity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Velocity = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Width = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Height = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Duration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameInfo{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &Point{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MotionData == nil {
				m.MotionData = &MotionData{}
			}
			if err := m.MotionData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GestureData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GestureData == nil {
				m.GestureData = &GestureData{}
			}
			if err := m.GestureData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppEventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppEventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppEventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &Point{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchEventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchEventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchEventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Game == nil {
				m.Game = &GameInfo{}
			}
			if err := m.Game.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loc == nil {
				m.Loc = &Point{}
			}
			if err := m.Loc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsResend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsResend = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MotionData == nil {
				m.MotionData = &MotionData{}
			}
			if err := m.MotionData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GestureData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GestureData == nil {
				m.GestureData = &GestureData{}
			}
			if err := m.GestureData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceInfo{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BatchEventData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListener
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListener
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListener
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipListener(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthListener
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipListener(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowListener
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListener
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListener
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthListener
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowListener
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipListener(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthListener = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowListener   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("listener.proto", fileDescriptorListener) }

var fileDescriptorListener = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x49, 0x51, 0xa2, 0x86, 0xb2, 0x9c, 0x6c, 0x93, 0x96, 0x75, 0x0b, 0xc1, 0x60, 0x5b,
	0xc0, 0x09, 0x50, 0xa5, 0x90, 0xe1, 0x4b, 0x7b, 0x28, 0x9c, 0xb8, 0x08, 0x04, 0xf4, 0xc7, 0xa0,
	0x83, 0x1c, 0x7a, 0x31, 0x56, 0xe4, 0x9a, 0x22, 0x4a, 0x72, 0x09, 0x72, 0xe9, 0x46, 0x79, 0x86,
	0x02, 0xed, 0xb1, 0xe7, 0xbe, 0x46, 0xef, 0x45, 0x8e, 0x39, 0xf4, 0x01, 0x1a, 0x07, 0xe8, 0xa9,
	0x0f, 0x51, 0xec, 0x70, 0x29, 0x92, 0xf1, 0x5f, 0x90, 0x1b, 0xbf, 0x99, 0x6f, 0x76, 0x77, 0xbe,
	0xf9, 0x46, 0x10, 0x8c, 0xe3, 0xa8, 0x10, 0x2c, 0x65, 0xf9, 0x34, 0xcb, 0xb9, 0xe0, 0xc4, 0xa4,
	0x59, 0x94, 0x2d, 0xb6, 0x3f, 0x0f, 0x23, 0xb1, 0x2c, 0x17, 0x53, 0x9f, 0x27, 0x0f, 0x42, 0x1e,
	0xf2, 0x07, 0x98, 0x5d, 0x94, 0xa7, 0x88, 0x10, 0xe0, 0x57, 0x55, 0xb5, 0x3d, 0x4a, 0x78, 0xc0,
	0xe2, 0xa2, 0x42, 0xee, 0x2f, 0x06, 0xc0, 0x21, 0x3b, 0x8b, 0x7c, 0x36, 0x4f, 0x4f, 0x39, 0xd9,
	0x06, 0xeb, 0x8c, 0xa5, 0x01, 0xcf, 0xe7, 0x81, 0xa3, 0xed, 0x68, 0xbb, 0x43, 0x6f, 0x8d, 0xc9,
	0xc7, 0x30, 0xf4, 0xe3, 0x88, 0xa5, 0xe2, 0x38, 0xf8, 0xc9, 0xd1, 0x31, 0xd9, 0x04, 0xc8, 0x7d,
	0xb8, 0xb5, 0x28, 0xd3, 0x20, 0x66, 0xf3, 0x80, 0xa5, 0x22, 0x3a, 0x8d, 0x58, 0xee, 0x18, 0x48,
	0xba, 0x10, 0x27, 0x9f, 0xc2, 0x66, 0x15, 0x7b, 0xca, 0xf2, 0x22, 0xe2, 0xa9, 0xd3, 0x43, 0x62,
	0x37, 0x48, 0xa6, 0x40, 0xaa, 0xc0, 0xf1, 0x92, 0xe7, 0xa2, 0xa6, 0x9a, 0x48, 0xbd, 0x24, 0x43,
	0x26, 0x00, 0x01, 0x76, 0xf2, 0x64, 0x95, 0x31, 0xa7, 0x8f, 0xbc, 0x56, 0xa4, 0xc9, 0x7f, 0x4f,
	0x13, 0xe6, 0x0c, 0xda, 0x79, 0x19, 0x21, 0xef, 0x43, 0x9f, 0x17, 0x98, 0xb3, 0x30, 0xa7, 0x90,
	0x7c, 0x6d, 0xb1, 0x2a, 0x04, 0x4b, 0xea, 0x27, 0x0c, 0xab, 0xd7, 0x76, 0x82, 0xc4, 0x85, 0x51,
	0x4c, 0xd3, 0xb0, 0xa4, 0x21, 0x7b, 0xc4, 0x03, 0xe6, 0x00, 0x92, 0x3a, 0x31, 0xb2, 0x03, 0xb6,
	0xcf, 0xcb, 0x54, 0xe4, 0x2b, 0xa4, 0xd8, 0x48, 0x69, 0x87, 0xdc, 0x23, 0xb0, 0x1e, 0xd3, 0xa4,
	0x9a, 0xc5, 0x18, 0xf4, 0xa8, 0x9e, 0x82, 0x1e, 0x05, 0xc4, 0x81, 0xc1, 0x99, 0x7a, 0x41, 0xa5,
	0x7e, 0x0d, 0xe5, 0xd4, 0xea, 0x7b, 0x94, 0xe6, 0x6b, 0xec, 0x1e, 0x80, 0x79, 0xc4, 0xa3, 0x54,
	0x54, 0x24, 0x11, 0x89, 0x32, 0x60, 0x78, 0xa8, 0xe9, 0xad, 0xb1, 0x1c, 0x6d, 0xcc, 0xd3, 0xb0,
	0x4a, 0xea, 0x98, 0x6c, 0x02, 0xee, 0x1e, 0x0c, 0x9e, 0x32, 0x5f, 0xf0, 0x7c, 0x8f, 0x8c, 0x40,
	0x7b, 0x86, 0xd5, 0xba, 0xa7, 0x3d, 0x93, 0x68, 0x85, 0x74, 0xdd, 0xd3, 0x56, 0x12, 0x3d, 0xc7,
	0xeb, 0x75, 0x4f, 0x7b, 0xee, 0xfe, 0xad, 0x01, 0x7c, 0xc7, 0x45, 0xc4, 0xd3, 0x43, 0x2a, 0x28,
	0xd9, 0x85, 0x41, 0x98, 0xd3, 0xb3, 0x48, 0xac, 0xb0, 0xdc, 0x9e, 0x8d, 0xa7, 0xe8, 0xde, 0xa9,
	0x3a, 0xd9, 0xab, 0xd3, 0xe4, 0x2b, 0xb8, 0x5d, 0x16, 0x2c, 0x3f, 0xa1, 0xbe, 0xcf, 0x62, 0x96,
	0x53, 0x51, 0x37, 0x7c, 0xb1, 0xe6, 0x96, 0x24, 0x1e, 0xb4, 0x78, 0x64, 0x0f, 0x36, 0x73, 0x2e,
	0xf0, 0xfb, 0x24, 0xa7, 0xa2, 0x92, 0xe3, 0x62, 0xe1, 0xa8, 0x26, 0x79, 0x54, 0x30, 0x72, 0x1f,
	0x2c, 0x2a, 0x94, 0x32, 0xbd, 0x4b, 0xf9, 0xeb, 0xbc, 0x5b, 0x80, 0xfd, 0x98, 0x15, 0xa2, 0xcc,
	0x19, 0xb6, 0x85, 0xfb, 0x12, 0x73, 0xbf, 0xee, 0x4b, 0xf7, 0xd6, 0x98, 0xdc, 0x01, 0xf3, 0xe7,
	0x28, 0x10, 0x4b, 0xa5, 0x50, 0x05, 0xa4, 0xcb, 0x96, 0x2c, 0x0a, 0x97, 0x42, 0x49, 0xa5, 0x90,
	0x3c, 0x29, 0x28, 0x55, 0xb7, 0xbd, 0xea, 0xa4, 0x1a, 0xbb, 0xff, 0x19, 0x60, 0x7e, 0x73, 0xc6,
	0x52, 0x41, 0x3e, 0x80, 0x01, 0x8a, 0xb3, 0x36, 0x46, 0x5f, 0xc2, 0x79, 0x40, 0x3e, 0x04, 0xcb,
	0x5f, 0x46, 0x71, 0x20, 0x33, 0xca, 0x1d, 0x88, 0xe7, 0x81, 0x7c, 0x07, 0x93, 0xc5, 0xca, 0x1a,
	0x15, 0x90, 0x23, 0x17, 0x51, 0xc2, 0x0a, 0x41, 0x93, 0x0c, 0x2f, 0x34, 0xbc, 0x26, 0x40, 0x3e,
	0x81, 0x5e, 0x28, 0x37, 0xc1, 0x44, 0x39, 0xb6, 0x94, 0x1c, 0xb5, 0x35, 0x3d, 0x4c, 0x92, 0x7b,
	0xd0, 0xaf, 0xd6, 0x07, 0x97, 0xcd, 0x9e, 0xdd, 0x56, 0xb4, 0xe6, 0xf7, 0xc4, 0x53, 0x04, 0x72,
	0x17, 0xfa, 0x34, 0xcb, 0xe4, 0xe3, 0xaa, 0xbd, 0x33, 0x69, 0x96, 0xcd, 0x03, 0x32, 0x01, 0x23,
	0xe6, 0x3e, 0xee, 0x9b, 0x3d, 0x1b, 0xa9, 0x72, 0xb4, 0xab, 0x27, 0x13, 0xb2, 0x2b, 0x7c, 0xad,
	0x2c, 0xac, 0xb6, 0x6e, 0x80, 0x78, 0x1e, 0x90, 0x8f, 0x60, 0x18, 0x15, 0x27, 0x39, 0x2b, 0x58,
	0x1a, 0xe0, 0xb2, 0x59, 0x9e, 0x15, 0x15, 0x1e, 0x62, 0xb9, 0x2a, 0x19, 0x5d, 0xc5, 0x9c, 0x06,
	0xb8, 0x64, 0x23, 0xaf, 0x86, 0xe4, 0x16, 0x18, 0x72, 0x4b, 0x46, 0xe8, 0x71, 0xf9, 0x49, 0x3e,
	0x83, 0x7e, 0xc8, 0xd2, 0x80, 0xe5, 0xce, 0xe6, 0x8e, 0xb6, 0x3b, 0x9e, 0x6d, 0xd6, 0xcd, 0x62,
	0xd0, 0x53, 0x49, 0x32, 0x03, 0x3b, 0x41, 0x3b, 0x9f, 0x04, 0x54, 0x50, 0x67, 0xdc, 0xe9, 0xb8,
	0x31, 0xba, 0x07, 0x49, 0x63, 0xfa, 0x7d, 0x18, 0x85, 0x95, 0x59, 0xaa, 0xa2, 0x2d, 0x2c, 0x22,
	0xeb, 0x0b, 0xd6, 0x3e, 0xf2, 0xec, 0xb0, 0x01, 0xee, 0xaf, 0x3a, 0x8c, 0x0e, 0xb2, 0x0c, 0x27,
	0x8e, 0xe7, 0xac, 0x27, 0xa8, 0xb5, 0x27, 0xd8, 0x68, 0xaa, 0xb7, 0x35, 0x6d, 0xa6, 0x62, 0xdc,
	0x34, 0x95, 0xeb, 0x3d, 0xd0, 0x12, 0xd1, 0xec, 0x8a, 0xa8, 0xc6, 0xd6, 0x7f, 0x9b, 0xb1, 0x0d,
	0xae, 0x19, 0x9b, 0xf5, 0xc6, 0xd8, 0x5a, 0xee, 0x1e, 0xb6, 0xdd, 0xed, 0xfe, 0xa5, 0xc3, 0xf8,
	0x21, 0x15, 0xfe, 0xf2, 0x26, 0x4d, 0xda, 0x37, 0xeb, 0xdd, 0x9b, 0x3b, 0xcd, 0x1a, 0x57, 0x19,
	0xbe, 0x77, 0x9d, 0xe1, 0x55, 0xdf, 0xe6, 0x55, 0x7d, 0x77, 0x9a, 0xeb, 0x5f, 0xed, 0xc9, 0x41,
	0x57, 0xce, 0x37, 0xac, 0x65, 0xbd, 0x8b, 0xb5, 0x86, 0x6f, 0x67, 0xad, 0x7f, 0x35, 0x80, 0x46,
	0xc8, 0x77, 0xfa, 0x39, 0x69, 0x6c, 0x67, 0x5c, 0x6e, 0xbb, 0xde, 0x4d, 0xb6, 0xbb, 0x07, 0x3d,
	0x7c, 0xb3, 0xb9, 0x63, 0xec, 0xda, 0xb3, 0xbb, 0x8a, 0xd8, 0x9d, 0xaf, 0x87, 0x94, 0x7a, 0x5d,
	0xfb, 0x97, 0xad, 0xeb, 0xe0, 0x9a, 0x75, 0x75, 0x0f, 0x61, 0x13, 0xcf, 0xf2, 0x58, 0x91, 0xf1,
	0xb4, 0x60, 0x1d, 0x67, 0x68, 0x5d, 0x67, 0x38, 0x30, 0x28, 0x4a, 0xdf, 0x67, 0x45, 0x81, 0xbd,
	0x5a, 0x5e, 0x0d, 0x67, 0x7f, 0x6a, 0xb0, 0xf5, 0xad, 0xfa, 0xd3, 0x75, 0xcc, 0x72, 0x7c, 0xfd,
	0x3e, 0x58, 0xf5, 0x72, 0x92, 0xf7, 0xd4, 0xe5, 0xed, 0x6d, 0xdd, 0xbe, 0xa3, 0x82, 0xdd, 0xfb,
	0xf7, 0xc1, 0x7e, 0x54, 0x16, 0x82, 0x27, 0x55, 0xe5, 0xa8, 0x4d, 0xba, 0xbc, 0x64, 0x57, 0xfb,
	0x42, 0x23, 0x5f, 0x82, 0x8d, 0xc2, 0x1c, 0x8b, 0x9c, 0xd1, 0x84, 0xdc, 0xbe, 0x20, 0xd6, 0xd5,
	0xb5, 0x0f, 0xbf, 0x7e, 0xf1, 0x6a, 0xb2, 0xf1, 0xf2, 0xd5, 0x64, 0xe3, 0xc5, 0xf9, 0x44, 0x7b,
	0x79, 0x3e, 0xd1, 0xfe, 0x39, 0x9f, 0x68, 0xbf, 0xbd, 0x9e, 0x6c, 0xfc, 0xfe, 0x7a, 0xb2, 0x01,
	0x5b, 0x3e, 0x4f, 0xa6, 0x5c, 0x14, 0x51, 0xc2, 0xa7, 0x61, 0x9e, 0xf9, 0x47, 0xda, 0x8f, 0x56,
	0x05, 0xb3, 0xc5, 0x1f, 0xba, 0xf1, 0xc3, 0x93, 0xe3, 0x45, 0x1f, 0xff, 0x23, 0xee, 0xfd, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0xa6, 0xb8, 0x0f, 0x77, 0x79, 0x0a, 0x00, 0x00,
}
